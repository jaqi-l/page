import{_ as i,c as s,o as a,aR as l,bf as h,bg as n,bh as t,bi as e,bj as k,bk as p,bl as r,bm as d}from"./chunks/framework.BwSdcL0X.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/dataStructure_algorithm.md","filePath":"other/dataStructure_algorithm.md","lastUpdated":1715234692000}'),E={name:"other/dataStructure_algorithm.md"},o=l('<h2 id="_10-1-基础数据结构" tabindex="-1">10.1 基础数据结构 <a class="header-anchor" href="#_10-1-基础数据结构" aria-label="Permalink to &quot;10.1 基础数据结构&quot;">​</a></h2><h3 id="_10-1-1-数组-array" tabindex="-1">10.1.1 数组（Array） <a class="header-anchor" href="#_10-1-1-数组-array" aria-label="Permalink to &quot;10.1.1 数组（Array）&quot;">​</a></h3><p>数组是可以在内存中连续存储多个元素的结构，在内存中的分配也是连续的 <img src="'+h+'" alt="array"></p><h4 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>按照索引查询元素速度快</li><li>按照索引遍历数组方便</li></ol><h4 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>数组的大小固定后就无法扩容了</li><li>数组只能存储一种类型的数据</li><li>添加，删除的操作慢，因为要移动其他的元素</li></ol><h4 id="适用场景" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><p>频繁查询，很少插入或删除的情况，且对存储空间要求不大</p><h3 id="_10-1-2-链表-linked-list" tabindex="-1">10.1.2 链表（Linked List） <a class="header-anchor" href="#_10-1-2-链表-linked-list" aria-label="Permalink to &quot;10.1.2 链表（Linked List）&quot;">​</a></h3><p>链表是物理存储单元上非连续的、非顺序的存储结构，数据元素的逻辑顺序是通过链表的指针地址实现，每个元素包含两个结点，一个是存储元素的数据域 (内存空间)，另一个是指向下一个结点地址的指针域。根据指针的指向，链表能形成不同的结构，例如单链表，双向链表，循环链表等 <img src="'+n+'" alt="linked-list"></p><h4 id="优点-1" tabindex="-1">优点： <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>链表是很常用的一种数据结构，不需要初始化容量，可以任意加减元素</li><li>添加或者删除元素时只需要改变前后两个元素结点的指针域指向地址即可，所以添加，删除很快</li></ol><h4 id="缺点-1" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>因为含有大量的指针域，占用空间较大</li><li>查找元素需要遍历链表来查找，非常耗时（使用<code>跳表</code>优化查询速度）</li></ol><h4 id="适用场景-1" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景-1" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><p>频繁插入或删除，很少查询的情况，且对存储空间要求不大</p><h3 id="_10-1-3-栈-stack" tabindex="-1">10.1.3 栈（Stack） <a class="header-anchor" href="#_10-1-3-栈-stack" aria-label="Permalink to &quot;10.1.3 栈（Stack）&quot;">​</a></h3><p>栈，也叫堆栈，是一种特殊的线性表，仅能在线性表的一端操作，栈顶允许操作，栈底不允许操作。 栈的特点是：先进后出，或者说是后进先出，从栈顶放入元素的操作叫入栈，取出元素叫出栈 <img src="'+t+'" alt="stack"></p><h4 id="优点-2" tabindex="-1">优点： <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>提供后进先出的存取方式</li></ol><h4 id="缺点-2" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>存取其他项都很慢</li></ol><h4 id="适用场景-2" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-2" aria-label="Permalink to &quot;适用场景&quot;">​</a></h4><p>递归功能方面的场景，例如斐波那契数列</p><h3 id="_10-1-4-队列-queue" tabindex="-1">10.1.4 队列（Queue） <a class="header-anchor" href="#_10-1-4-队列-queue" aria-label="Permalink to &quot;10.1.4 队列（Queue）&quot;">​</a></h3><p>队列与栈一样，也是一种线性表，不同的是，队列可以在一端添加元素，在另一端取出元素，也就是：先进先出。从一端放入元素的操作称为入队，取出元素为出队。 <img src="'+e+'" alt="queue"></p><h4 id="优点-3" tabindex="-1">优点： <a class="header-anchor" href="#优点-3" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>提供先进先出的存取方式</li></ol><h4 id="缺点-3" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>存取其他项都很慢</li></ol><h4 id="适用场景-3" tabindex="-1">适用场景 <a class="header-anchor" href="#适用场景-3" aria-label="Permalink to &quot;适用场景&quot;">​</a></h4><p>多线程阻塞队列管理</p><h3 id="_10-1-5-树-tree" tabindex="-1">10.1.5 树（Tree） <a class="header-anchor" href="#_10-1-5-树-tree" aria-label="Permalink to &quot;10.1.5 树（Tree）&quot;">​</a></h3><p>树是一种数据结构，它是由n（n&gt;=1）个有限节点组成一个具有层次关系的集合。把它叫做 “树” 是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。</p><ul><li>它具有以下的特点：</li></ul><ol><li>每个节点有零个或多个子节点</li><li>没有父节点的节点称为根节点</li><li>每一个非根节点有且只有一个父节点</li><li>除了根节点外，每个子节点可以分为多个不相交的子树</li></ol><p><img src="'+k+'" alt="tree"></p><ul><li>二叉树特点：</li></ul><ol><li>每个结点最多有两颗子树，结点的度最大为2</li><li>左子树和右子树是有顺序的，次序不能颠倒</li><li>即使某结点只有一个子树，也要区分左右子树</li></ol><ul><li>二叉搜索树特点：</li></ul><ol><li>左子树上的所有节点值均小于它的根节点的值</li><li>右子树上的所有节点值均大于它的根节点的值</li><li>左右子树也分别符合以上两点</li></ol><h4 id="优点-4" tabindex="-1">优点： <a class="header-anchor" href="#优点-4" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>查找，插入，删除都快</li><li>既有链表的好处，也有数组的好处</li></ol><h4 id="缺点-4" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-4" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><h4 id="适用场景-4" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景-4" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><p>二叉树既有链表的好处，也有数组的好处，是两者的优化方案，在处理大批量的动态数据方面非常有用。</p><h3 id="_10-1-6-哈希表-hash-table" tabindex="-1">10.1.6 哈希表（Hash table） <a class="header-anchor" href="#_10-1-6-哈希表-hash-table" aria-label="Permalink to &quot;10.1.6 哈希表（Hash table）&quot;">​</a></h3><p>哈希表，也叫散列表，是根据关键码和值 (key和value) 直接进行访问的数据结构，通过key和value来映射到集合中的一个位置，这样就可以很快找到集合中的对应元素(哈希冲突：如果key值重复则通常用链表存储相同key值对应的value)。 <img src="'+p+'" alt="hash"></p><h4 id="优点-5" tabindex="-1">优点： <a class="header-anchor" href="#优点-5" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>如果关键字已知则存取速度极快</li></ol><h4 id="缺点-5" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-5" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>删除慢，如果不知道关键则存取很慢，对存储空间使用不充分</li></ol><h4 id="适用场景-5" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景-5" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><p>Map、Set</p><h3 id="_10-1-7-堆-heap" tabindex="-1">10.1.7 堆（Heap） <a class="header-anchor" href="#_10-1-7-堆-heap" aria-label="Permalink to &quot;10.1.7 堆（Heap）&quot;">​</a></h3><p>堆是一种比较特殊的数据结构，可以被看做一棵树的数组对象。</p><ul><li>具有以下的性质：</li></ul><ol><li>堆中某个节点的值总是不大于或不小于其父节点的值；</li><li>堆总是一棵完全二叉树。</li><li>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</li></ol><p>将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。常见的堆有二叉堆、斐波那契堆等。</p><p>堆的定义如下：n个元素的序列{k1,k2,ki,…,kn}当且仅当满足下关系时，称之为堆。 (ki &lt;= k2i,ki &lt;= k2i+1)或者(ki &gt;= k2i,ki &gt;= k2i+1), (i = 1,2,3,4…n/2)，满足前者的表达式的成为小顶堆，满足后者表达式的为大顶堆，这两者的结构图可以用完全二叉树排列出来，示例图如下：</p><p><img src="'+r+'" alt="heap"></p><h4 id="优点-6" tabindex="-1">优点： <a class="header-anchor" href="#优点-6" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ol><li>插入，删除块，对最大数据的项存取很快</li></ol><h4 id="缺点-6" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-6" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ol><li>对其他数据项存取很慢</li></ol><h4 id="适用场景-6" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景-6" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><p>因为堆有序的特点，一般用来做数组中的排序，称为堆排序。</p><h3 id="_10-1-8-图-graph" tabindex="-1">10.1.8 图（Graph） <a class="header-anchor" href="#_10-1-8-图-graph" aria-label="Permalink to &quot;10.1.8 图（Graph）&quot;">​</a></h3><p>图是由结点的有穷集合V和边的集合E组成。其中，为了与树形结构加以区别，在图结构中常常将结点称为顶点，边是顶点的有序偶对，若两个顶点之间存在一条边，就表示这两个顶点具有相邻关系。</p><p><img src="'+d+`" alt="graph"></p><p>图是一种比较复杂的数据结构，在存储数据上有着比较复杂和高效的算法，分别有邻接矩阵 、邻接表、十字链表、邻接多重表、边集数组等存储结构，这里不做展开，读者有兴趣可以自己学习深入。</p><h4 id="优点-7" tabindex="-1">优点： <a class="header-anchor" href="#优点-7" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><h4 id="缺点-7" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-7" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><h4 id="适用场景-7" tabindex="-1">适用场景： <a class="header-anchor" href="#适用场景-7" aria-label="Permalink to &quot;适用场景：&quot;">​</a></h4><h2 id="_10-2-时间复杂度与空间复杂度" tabindex="-1">10.2 时间复杂度与空间复杂度 <a class="header-anchor" href="#_10-2-时间复杂度与空间复杂度" aria-label="Permalink to &quot;10.2 时间复杂度与空间复杂度&quot;">​</a></h2><p>时间：是指执行当前算法所消耗的时间 空间：是指执行当前算法需要占用多少内存空间 负责度：是指算法随着执行次数的增长，所花费的时间、空间的增长趋势</p><h3 id="_10-2-1-时间复杂度" tabindex="-1">10.2.1 时间复杂度 <a class="header-anchor" href="#_10-2-1-时间复杂度" aria-label="Permalink to &quot;10.2.1 时间复杂度&quot;">​</a></h3><h4 id="公式-t-n-o-f-n" tabindex="-1">公式：<code>T(n) = O(f(n))</code> <a class="header-anchor" href="#公式-t-n-o-f-n" aria-label="Permalink to &quot;公式：\`T(n) = O(f(n))\`&quot;">​</a></h4><blockquote><p><code>f(n)</code>:表示每行代码执行次数之和 去掉常数项和系数、只保留复杂度最大项</p></blockquote><h4 id="常见的时间复杂度量级有" tabindex="-1">常见的时间复杂度量级有： <a class="header-anchor" href="#常见的时间复杂度量级有" aria-label="Permalink to &quot;常见的时间复杂度量级有：&quot;">​</a></h4><ul><li>常数阶<code>O(1)</code> 无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j;</span></span></code></pre></div><ul><li>对数阶<code>O(logN)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">int i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>线性阶<code>O(n)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>线性对数阶<code>O(nlogN)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>平方阶<code>O(n²)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       j</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>立方阶<code>O(n³)</code></li><li>K次方阶<code>O(n^k)</code></li><li>指数阶<code>(2^n)</code></li></ul><div class="tip custom-block"><p class="custom-block-title">时间负责度优化方向</p><p>升维、空间换时间</p></div><h3 id="_10-2-2-空间复杂度" tabindex="-1">10.2.2 空间复杂度 <a class="header-anchor" href="#_10-2-2-空间复杂度" aria-label="Permalink to &quot;10.2.2 空间复杂度&quot;">​</a></h3><h4 id="公式-t-n-o-f-n-1" tabindex="-1">公式：<code>T(n) = O(f(n))</code> <a class="header-anchor" href="#公式-t-n-o-f-n-1" aria-label="Permalink to &quot;公式：\`T(n) = O(f(n))\`&quot;">​</a></h4><blockquote><p><code>f(n)</code>:表示每行代码占用的空间大小之和 去掉常数项和系数、只保留复杂度最大项</p></blockquote><h4 id="常见的时间复杂度量级有-1" tabindex="-1">常见的时间复杂度量级有： <a class="header-anchor" href="#常见的时间复杂度量级有-1" aria-label="Permalink to &quot;常见的时间复杂度量级有：&quot;">​</a></h4><ul><li>常数阶<code>O(1)</code> 只要不会因为算法里的执行，导致额外的空间增长，就算是一万行，空间复杂度也是<code>O(1)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开始吃糖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我吃了1颗糖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我吃了2颗糖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ......</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;我吃了10000颗糖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>线性阶<code>O(n)</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        arr[i] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>平方阶<code>O(n²)</code> O(n²) 这种空间复杂度一般出现在比如二维数组，或是矩阵的情况</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><ul><li>阶乘<code>O(n!)</code></li></ul><h2 id="_10-3-算法" tabindex="-1">10.3 算法 <a class="header-anchor" href="#_10-3-算法" aria-label="Permalink to &quot;10.3 算法&quot;">​</a></h2><h3 id="_10-3-1-排序" tabindex="-1">10.3.1 排序 <a class="header-anchor" href="#_10-3-1-排序" aria-label="Permalink to &quot;10.3.1 排序&quot;">​</a></h3><h3 id="_10-3-2-暴力枚举" tabindex="-1">10.3.2 暴力枚举 <a class="header-anchor" href="#_10-3-2-暴力枚举" aria-label="Permalink to &quot;10.3.2 暴力枚举&quot;">​</a></h3><h3 id="_10-3-3-图、树、线性表" tabindex="-1">10.3.3 图、树、线性表 <a class="header-anchor" href="#_10-3-3-图、树、线性表" aria-label="Permalink to &quot;10.3.3 图、树、线性表&quot;">​</a></h3><h3 id="_10-3-4-分治法" tabindex="-1">10.3.4 分治法 <a class="header-anchor" href="#_10-3-4-分治法" aria-label="Permalink to &quot;10.3.4 分治法&quot;">​</a></h3><h3 id="_10-3-5-递归" tabindex="-1">10.3.5 递归 <a class="header-anchor" href="#_10-3-5-递归" aria-label="Permalink to &quot;10.3.5 递归&quot;">​</a></h3><h3 id="_10-3-6-动态规划" tabindex="-1">10.3.6 动态规划 <a class="header-anchor" href="#_10-3-6-动态规划" aria-label="Permalink to &quot;10.3.6 动态规划&quot;">​</a></h3><h3 id="_10-3-7-贪心" tabindex="-1">10.3.7 贪心 <a class="header-anchor" href="#_10-3-7-贪心" aria-label="Permalink to &quot;10.3.7 贪心&quot;">​</a></h3>`,112),c=[o];function g(y,u,b,F,q,m){return a(),s("div",null,c)}const f=i(E,[["render",g]]);export{C as __pageData,f as default};
