import{_ as s,c as i,o as a,aR as e}from"./chunks/framework.CEJVZlIo.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/event.md","filePath":"frontend/javascript/event.md","lastUpdated":1715240887000}'),l={name:"frontend/javascript/event.md"},t=e(`<h2 id="_3-12-1基本概念" tabindex="-1">3.12.1基本概念 <a class="header-anchor" href="#_3-12-1基本概念" aria-label="Permalink to &quot;3.12.1基本概念&quot;">​</a></h2><p>事件是一些特定动作发生时所发出的信号,JavaScript中的事件是可以被JavaScript侦测到的行为。</p><p>网页中的每个元素都可以产生某些事件，我们可以在用户点击某按钮时产生一个onClick事件来触发某个函数。</p><h2 id="_3-12-2事件处理-绑定事件" tabindex="-1">3.12.2事件处理(绑定事件) <a class="header-anchor" href="#_3-12-2事件处理-绑定事件" aria-label="Permalink to &quot;3.12.2事件处理(绑定事件)&quot;">​</a></h2><h3 id="dom0级" tabindex="-1">DOM0级： <a class="header-anchor" href="#dom0级" aria-label="Permalink to &quot;DOM0级：&quot;">​</a></h3><p>同一个元素的同一种事件只能绑定一个函数，否则后面的函数会覆盖之前的函数</p><ul><li>内联方式</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myButton&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Press Me&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;alert(&#39;thanks&#39;);&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &gt;</span></span></code></pre></div><ul><li>脚本方式</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myButton&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onclick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;thanks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>事件清理</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   input.onclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span></code></pre></div><h3 id="dom2级" tabindex="-1">DOM2级： <a class="header-anchor" href="#dom2级" aria-label="Permalink to &quot;DOM2级：&quot;">​</a></h3><ul><li><code>addEventListener</code>绑定事件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useCapture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>新的写法：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    capture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//捕获</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    passive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //只触发一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><ul><li><code>removeEventListener</code>移除事件</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useCapture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li>新的写法：</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    capture</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//捕获</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    passive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 只触发一次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><blockquote><p><code>event</code>:事件名<br><code>function</code>:绑定的函数<br><code>useCapture</code>、<code>capture</code>：（true：捕获/false：冒泡） <code>passive</code>提前告诉浏览器是否会阻止默认行为(Firefox、safari和Chrome支持)<br><code>once</code>只触发一次(目前浏览器都不支持)</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li>IE8及其以下需要使用IE事件处理程序attachEvent/detachEvent</li><li>捕获与冒泡详见<a href="/frontend/javascript/event.html#_3-12-6事件的冒泡和捕获">3.12.6</a></li><li>如果要阻止默认行为，需设置<code>passive</code>，否则可能会失败</li><li>要移除事件时，移除时绑定的事件必须监听时绑定的是同一个事件。</li></ol><blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;touchmove&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fn);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;touchmove&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.fn);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event) {console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event)};</span></span></code></pre></div></blockquote></div><h3 id="dom0级与dom2级的区别" tabindex="-1">DOM0级与DOM2级的区别： <a class="header-anchor" href="#dom0级与dom2级的区别" aria-label="Permalink to &quot;DOM0级与DOM2级的区别：&quot;">​</a></h3><ul><li><p>DOM0：存在覆盖的问题；下边的代码会把上边的代码覆盖</p></li><li><p>DOM2：同时绑定几个事件（相同或不同），然后顺序执行，不会覆盖。</p></li></ul><h3 id="dom3级" tabindex="-1">DOM3级： <a class="header-anchor" href="#dom3级" aria-label="Permalink to &quot;DOM3级：&quot;">​</a></h3><p>DOM3级事件在DOM2级事件的基础上添加了更多的事件类型，全部类型如下：</p><blockquote><p>UI事件，当用户与页面上的元素交互时触发，如：load、scroll<br> 焦点事件，当元素获得或失去焦点时触发，如：blur、focus<br> 鼠标事件，当用户通过鼠标在页面执行操作时触发如：dbclick、mouseup<br> 滚轮事件，当使用鼠标滚轮或类似设备时触发，如：mousewheel<br> 文本事件，当在文档中输入文本时触发，如：textInput<br> 键盘事件，当用户通过键盘在页面上执行操作时触发，如：keydown、keypress<br> 合成事件，当为IME（输入法编辑器）输入字符时触发，如：compositionstart<br> 变动事件，当底层DOM结构发生变化时触发，如：DOMsubtreeModified<br> 同时DOM3级事件也允许使用者自定义一些事件</p></blockquote><h2 id="_3-12-3常用的事件类型-事件处理函数" tabindex="-1">3.12.3常用的事件类型(事件处理函数) <a class="header-anchor" href="#_3-12-3常用的事件类型-事件处理函数" aria-label="Permalink to &quot;3.12.3常用的事件类型(事件处理函数)&quot;">​</a></h2><h3 id="鼠标事件" tabindex="-1">鼠标事件 <a class="header-anchor" href="#鼠标事件" aria-label="Permalink to &quot;鼠标事件&quot;">​</a></h3><ul><li><p><code>onclick</code>鼠标点击某个对象</p></li><li><p><code>ondblclick</code>当用户双击某个对象时调用的事件句柄。</p></li><li><p><code>oncontextmenu</code>在用户点击鼠标右键打开上下文菜单时触发</p></li><li><p><code>onmousedown</code>鼠标按钮被按下。</p></li><li><p><code>onmousemove</code>鼠标被移动。</p></li><li><p><code>onmouseout</code>鼠标从某元素移开。</p></li><li><p><code>onmouseover</code>鼠标移到某元素之上。</p></li><li><p><code>onmouseup</code>鼠标按键被松开。</p></li></ul><h3 id="键盘事件" tabindex="-1">键盘事件 <a class="header-anchor" href="#键盘事件" aria-label="Permalink to &quot;键盘事件&quot;">​</a></h3><ul><li><code>onkeydown</code>某个键盘按键被按下。</li></ul><blockquote><p>用户按下任何键盘键时发生,因此监听一个用户是否按下按键请使用 onkeydown 事件，所以浏览器都支持。</p></blockquote><ul><li><p><code>onkeyup</code>某个键盘按键被松开。</p></li><li><p><code>onkeypress</code>某个键盘按键被按下并松开。</p></li></ul><blockquote><p>不是适用于系统按钮(如： ALT, CTRL, SHIFT, ESC)。</p></blockquote><ul><li><code>keyCode</code></li></ul><blockquote><ul><li>键盘事件的event对象中包含一个keyCode属性，onkeydown和onkeyup表示你按下的具体的键，而onkeypress表示你按下的字符。<br><code>keyCode</code>详见<a href="/frontend/javascript/event.html#3.12.4事件的对象获">3.12.4</a></li></ul></blockquote><h3 id="其他事件" tabindex="-1">其他事件 <a class="header-anchor" href="#其他事件" aria-label="Permalink to &quot;其他事件&quot;">​</a></h3><p><code>onload</code>一个页面或一幅图像完成加载<br><code>onunload</code>用户退出页面。存在兼容性问题</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><blockquote><ol><li>IE6，IE7，IE8中，刷新页面、关闭浏览器之后、页面跳转之后都会执行。</li><li>IE9刷新页面会执行，页面跳转、关闭浏览器不能执行。</li><li>Opera、Chrome 任何情况都不执行。</li></ol></blockquote></div><ul><li><p><code>onblur</code>元素失去焦点。</p></li><li><p><code>onfocus</code>元素获得焦点。</p></li><li><p><code>onselect</code>文本被选中。</p></li><li><p><code>onabort</code>图像的加载被中断</p></li><li><p><code>onchange</code>域的内容被改变。</p></li><li><p><code>onerror</code>在加载文档或图像时发生错误。</p></li><li><p><code>onreset</code>重置按钮被点击。</p></li><li><p><code>onscroll</code>当文档被滚动时发生的事件。</p></li></ul><h2 id="_3-12-4事件的对象" tabindex="-1">3.12.4事件的对象 <a class="header-anchor" href="#_3-12-4事件的对象" aria-label="Permalink to &quot;3.12.4事件的对象&quot;">​</a></h2><p>在触发某个事件时，会产生一个事件对象<code>event</code>这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。</p><ul><li><p><code>type</code>获取事件类型</p></li><li><p><code>target</code>获取事件目标</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.target </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.srcElement; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//获取当前事件源</span></span></code></pre></div></li><li><p><code>clientX</code>/<code>clientY</code>窗口坐标</p></li><li><p><code>pageX</code>/<code>pageY</code>页面坐标（包括已卷曲距离）</p></li><li><p><code>screenX</code>/<code>screenY</code>屏幕坐标</p></li><li><p><code>offsetX</code>/<code>offsetY</code>区域坐标（相对于带有定位的父盒子）</p></li></ul><h4 id="键值" tabindex="-1">键值 <a class="header-anchor" href="#键值" aria-label="Permalink to &quot;键值&quot;">​</a></h4><blockquote><ul><li>keyCode兼容：</li></ul></blockquote><ul><li><code>keyCode</code></li></ul><blockquote><p>返回keydown和keyup事件时触发的键盘按键对应的ASII码（不支持Firefox浏览器的onkeypress事件）。</p></blockquote><ul><li><code>which</code></li></ul><blockquote><p>返回onkeypress、nkeydown、onkeyup事件时触发的键盘按键对应的ASII码（不支持IE8及其更早版本）。</p></blockquote><blockquote><blockquote><p>兼容方案：</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onkeydown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.event;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.keyCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.which;}</span></span></code></pre></div></blockquote><ul><li><code>ctrlKey</code>/<code>altKey</code>/<code>shiftKey</code></li></ul><blockquote><p>事件被触发时ctrl/alt/shift键是否被按下，返回布尔值。</p></blockquote><ul><li><code>button</code>返回当事件被触发时，哪个鼠标按钮被点击。</li></ul><blockquote><p>0|1|2分别代表左中右三个键，IE浏览器左中右三个键对应的数字为1|4|2</p><p>兼容：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  returee.button</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event.button){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  case</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="_3-12-5client-offset-scroll" tabindex="-1">3.12.5client/offset/scroll <a class="header-anchor" href="#_3-12-5client-offset-scroll" aria-label="Permalink to &quot;3.12.5client/offset/scroll&quot;">​</a></h2><h3 id="client" tabindex="-1">client <a class="header-anchor" href="#client" aria-label="Permalink to &quot;client&quot;">​</a></h3><ul><li><code>clientWidth</code>/<code>clientHeight</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">element.clientWidth</span></span></code></pre></div><p>内容+外边距padding（,与内容是否溢出无关,不包括滚动条、边框和外边距）</p><ul><li><code>clientTop</code>/<code>clientLeft</code></li></ul><ol><li>如果文字方向从右往左(默认从左往右,通过设置 direction: rtl;)进行排列,且存在垂直滚动条的情况下 一侧边框宽度border+一侧宽带条宽度scollbar</li><li>默认情况下 一侧边框宽度border</li></ol><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果当前元素是行内元素(inline)时, clientLeft将返回 0;</p></div><h3 id="offset" tabindex="-1">offset <a class="header-anchor" href="#offset" aria-label="Permalink to &quot;offset&quot;">​</a></h3><ul><li><code>offsetParent</code> ie8+：假如祖先元素中都没有定位，offsetParent就是body，如果有定位，则以结构上最近的带有定位的祖先元素为准。 ie6/7：自身没有定位，参考的是最近的有宽高的祖先元素，没有宽高参考body。如果自身有定位，与高级浏览器一直。</li></ul><p>*兼容：自身元素定位，祖先无边框。</p><ul><li><code>offsetWidth</code>/<code>offsetHeight</code></li></ul><p>内容+边框border+外边距padding（与内容是否溢出无关）</p><ul><li><code>offsetLeft</code>/<code>offsetTop</code> offsetLeft：元素自身的左边框外部到offsetParent左边框内部的距离。（ie8：多一个offsetParent边框）<br> offsetTop：元素自身的上边框外部到offsetParent上边框内部的距离。（ie8：多一个offsetParent边框）</li></ul><h3 id="scroll" tabindex="-1">scroll <a class="header-anchor" href="#scroll" aria-label="Permalink to &quot;scroll&quot;">​</a></h3><ul><li><p><code>scrollWidth</code>/<code>scrollHeight</code> 起始位置内边距+内容实际宽度（与内容溢出有关） scrollWidth=padding-left+textwidth scrollHeight= padding-top+textheight</p></li><li><p><code>scrollTop</code>/<code>scrollLeft</code></p></li></ul><p>兼容：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scrollTop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.documentElement.scrollTop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">doucument.body.scrollTop;</span></span></code></pre></div><h2 id="_3-12-6事件的冒泡和捕获" tabindex="-1">3.12.6事件的冒泡和捕获 <a class="header-anchor" href="#_3-12-6事件的冒泡和捕获" aria-label="Permalink to &quot;3.12.6事件的冒泡和捕获&quot;">​</a></h2><h3 id="事件的冒泡" tabindex="-1">事件的冒泡： <a class="header-anchor" href="#事件的冒泡" aria-label="Permalink to &quot;事件的冒泡：&quot;">​</a></h3><p>事件按照从最特定的事件目标到最不特定的事件目标的顺序触发。 事件会从最内层的元素开始发生，一直向上传播，直到document对象。</p><h3 id="事件的捕获" tabindex="-1">事件的捕获： <a class="header-anchor" href="#事件的捕获" aria-label="Permalink to &quot;事件的捕获：&quot;">​</a></h3><p>与事件冒泡相反，事件会从最外层开始发生，直到最具体的元素。 事件捕获时，父级元素先触发，子级元素后触发</p><p>通过addEventListener函数，可以自己选择绑定事件时采用事件捕获还是事件冒泡它有三个参数，第三个参数若是true，则表示采用事件捕获，若是false，则表示采用事件冒泡。详见<a href="/frontend/javascript/event.html#_3-12-2事件的冒泡和捕获">3.12.2</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li>IE9以前的版本只支持事件冒泡，不支持事件捕获，它也不支持addEventListener函数，不会用第三个参数来表示是冒泡还是捕获，它提供了另一个函数attachEvent。</li><li>不是所有的事件都能冒泡，例如：blur、focus、load、unload</li></ol></div><h3 id="事件的阻止" tabindex="-1">事件的阻止 <a class="header-anchor" href="#事件的阻止" aria-label="Permalink to &quot;事件的阻止&quot;">​</a></h3><h4 id="阻止冒泡或捕获" tabindex="-1">阻止冒泡或捕获 <a class="header-anchor" href="#阻止冒泡或捕获" aria-label="Permalink to &quot;阻止冒泡或捕获&quot;">​</a></h4><p>新：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ie8以下：e.stopPropagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.cancelBubble</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="阻止事件的默认行为" tabindex="-1">阻止事件的默认行为 <a class="header-anchor" href="#阻止事件的默认行为" aria-label="Permalink to &quot;阻止事件的默认行为&quot;">​</a></h4><p>新:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ie8以下：</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.returnValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h4 id="冒泡或捕获也阻止事件的默认行为" tabindex="-1">冒泡或捕获也阻止事件的默认行为 <a class="header-anchor" href="#冒泡或捕获也阻止事件的默认行为" aria-label="Permalink to &quot;冒泡或捕获也阻止事件的默认行为&quot;">​</a></h4><p><code>stopImmediatePropagation</code>DOM3新增方法</p>`,92),n=[t];function h(p,k,o,d,c,r){return a(),i("div",null,n)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
