import{_ as e,c as a,o,aR as c,bn as s,bo as d,bp as i}from"./chunks/framework.BwSdcL0X.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"other/docker.md","filePath":"other/docker.md","lastUpdated":1715234692000}'),l={name:"other/docker.md"},r=c(`<h2 id="_9-1-docker概述" tabindex="-1">9.1 Docker概述 <a class="header-anchor" href="#_9-1-docker概述" aria-label="Permalink to &quot;9.1 Docker概述&quot;">​</a></h2><h4 id="docker为什么会出现" tabindex="-1">Docker为什么会出现？ <a class="header-anchor" href="#docker为什么会出现" aria-label="Permalink to &quot;Docker为什么会出现？&quot;">​</a></h4><ul><li>传统的发布流程：</li></ul><ol><li>发布项目时所有依赖都需要单独配置</li><li>开发环境、生产环境还要分别配置</li><li>不能跨平台</li></ol><ul><li><code>Docker</code>的发布流程： 将业务代码和环境一起打包直接发布到服务器。</li></ul><ol><li>常用的依赖和配置全部打包到<code>Docker</code>镜像仓库</li><li>发布时直接下载不需要单独配置</li></ol><h4 id="docker-hub" tabindex="-1">Docker Hub <a class="header-anchor" href="#docker-hub" aria-label="Permalink to &quot;Docker Hub&quot;">​</a></h4><p>Docker的官方镜像仓库</p><h4 id="docker核心概念" tabindex="-1">Docker核心概念 <a class="header-anchor" href="#docker核心概念" aria-label="Permalink to &quot;Docker核心概念&quot;">​</a></h4><ol><li>&quot;镜像(image)&quot;：依赖的程序和配置文件的集合</li><li>&quot;仓库(repository)&quot;：存放镜像的位置</li><li>&quot;容器(container)&quot;：使用虚拟化技术实现的运行镜像的环境</li><li>&quot;隔离&quot;：容器彼此隔离，互不影响</li></ol><h4 id="容器的生命周期" tabindex="-1">容器的生命周期 <a class="header-anchor" href="#容器的生命周期" aria-label="Permalink to &quot;容器的生命周期&quot;">​</a></h4><ol><li><code>created</code>初建状态</li><li><code>running</code>运行状态</li><li><code>stopped</code>停止状态</li><li><code>paused</code>暂停状态</li></ol><h4 id="底层原理" tabindex="-1">底层原理 <a class="header-anchor" href="#底层原理" aria-label="Permalink to &quot;底层原理&quot;">​</a></h4><ul><li>Docker的工作原理</li></ul><blockquote><p>Docker是一个Client-Server结构的系统，Docker的守护进程（一直在后台运行的进程）运行在主机上，通过Socket从客户端访问。 DockerServer接收到Docker-Client的指令,就会执行这个命令。</p></blockquote><h2 id="_9-2-docker安装" tabindex="-1">9.2 Docker安装 <a class="header-anchor" href="#_9-2-docker安装" aria-label="Permalink to &quot;9.2 Docker安装&quot;">​</a></h2><p><a href="https://docs.docker.com/get-docker/" target="_blank" rel="noreferrer">官方文档</a></p><ol><li>查看centos内核版本（&gt;=3.10）：<code>uname -r</code></li><li>安装之前需要卸载旧版：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> sudo yum remove docker \\</span></span>
<span class="line"><span>                  docker-client \\</span></span>
<span class="line"><span>                  docker-client-latest \\</span></span>
<span class="line"><span>                  docker-common \\</span></span>
<span class="line"><span>                  docker-latest \\</span></span>
<span class="line"><span>                  docker-latest-logrotate \\</span></span>
<span class="line"><span>                  docker-logrotate \\</span></span>
<span class="line"><span>                  docker-engine</span></span></code></pre></div><ol start="3"><li>安装docker环境：<code>yum install -y yum-utils</code></li><li>配置镜像仓库：</li><li>更新yum索引：<code>yum makecache fast</code></li><li>安装docker：<code>yum install docker docker-ce docker-ce-cli containerd.io</code></li><li>查看版本：<code>docker version</code></li><li>启动：<code>systemctl start docker</code></li><li>运行：<code>docker run hello-world</code></li><li>查看镜像：<code>docker images</code></li><li>卸载依赖：<code>yum remove docker-ce docker-ce-cli containerd.io</code></li><li>卸载资源：<code>rm -rf /var/lib/docker</code>、<code>rm -rf /var/lib/containerd</code></li><li>使用阿里云镜像加速器：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>sudo mkdir -p /etc/docker</span></span>
<span class="line"><span>sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;registry-mirrors&quot;: [&quot;https://g099lhap.mirror.aliyuncs.com&quot;]</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>EOF</span></span>
<span class="line"><span>sudo systemctl daemon-reload</span></span>
<span class="line"><span>sudo systemctl restart docker</span></span></code></pre></div><h4 id="docker-run的运行过程" tabindex="-1"><code>docker run</code>的运行过程 <a class="header-anchor" href="#docker-run的运行过程" aria-label="Permalink to &quot;\`docker run\`的运行过程&quot;">​</a></h4><p><code>docker run &lt;imagesName&gt;</code></p><blockquote><ol><li>判断是否有这个镜像</li><li>没有则去DockerHub下载到本地</li><li>运行镜像</li></ol></blockquote><h2 id="_9-3-docker命令" tabindex="-1">9.3 Docker命令 <a class="header-anchor" href="#_9-3-docker命令" aria-label="Permalink to &quot;9.3 Docker命令&quot;">​</a></h2><p><a href="https://docs.docker.com/reference/" target="_blank" rel="noreferrer">官方命令文档</a></p><p><img src="`+s+'" alt="docker"></p><p><img src="'+d+'" alt="docker"></p><p>查看Docker版本：<code>docker version</code><br> 查看Docker信息：<code>docker info</code><br> Docker帮助命令：<code>docker &lt;命令&gt; --help</code></p><h2 id="_9-4-镜像命令" tabindex="-1">9.4 镜像命令 <a class="header-anchor" href="#_9-4-镜像命令" aria-label="Permalink to &quot;9.4 镜像命令&quot;">​</a></h2><h3 id="_9-4-1-docker-images查看镜像" tabindex="-1">9.4.1 <code>docker images</code>查看镜像 <a class="header-anchor" href="#_9-4-1-docker-images查看镜像" aria-label="Permalink to &quot;9.4.1 `docker images`查看镜像&quot;">​</a></h3><p><code>docker images [OPTIONS] [REPOSITORY[:TAG]]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-f</code>：过滤条件<br><code>-q</code>：只显示ID</p></blockquote></blockquote><blockquote><p>返回参数</p><blockquote><p><code>REPOSITORY</code>：镜像仓库<br><code>TAG</code>：镜像标签<br><code>TMAGE ID</code>：镜像ID<br><code>CREATED</code>：镜像创建事件<br><code>SIZE</code>：镜像创建大小</p></blockquote></blockquote><ul><li>列出本地镜像中<code>REPOSITORY</code>为<code>ubuntu</code>的镜像列表</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker images  ubuntu</span></span></code></pre></div><h3 id="_9-4-2-docker-search搜索镜像" tabindex="-1">9.4.2 <code>docker search</code>搜索镜像 <a class="header-anchor" href="#_9-4-2-docker-search搜索镜像" aria-label="Permalink to &quot;9.4.2 `docker search`搜索镜像&quot;">​</a></h3><p><code>docker search [OPTIONS] TERM</code></p><ul><li>从Docker Hub查找所有镜像名包含node，并且收藏数大于 10 的镜像</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker search -f stars=10 node</span></span></code></pre></div><h3 id="_9-4-3-docker-pull下载镜像" tabindex="-1">9.4.3 <code>docker pull</code>下载镜像 <a class="header-anchor" href="#_9-4-3-docker-pull下载镜像" aria-label="Permalink to &quot;9.4.3 `docker pull`下载镜像&quot;">​</a></h3><p><code>docker pull [Registry]/[Repository]/[Image]:[Tag]</code></p><blockquote><p><code>Registry</code>：注册服务器（用于管理镜像仓库的服务器）<br><code>Repository</code>：镜像仓库<br><code>tag</code>：镜像的标签，默认为latest。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>先从本地搜索，没有则从Docker Hub下载镜像。</p></div><p>从Docker Hub下载node最新版镜像。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker pull node</span></span></code></pre></div><h3 id="_9-4-4-docker-rmi删除镜像" tabindex="-1">9.4.4 <code>docker rmi</code>删除镜像 <a class="header-anchor" href="#_9-4-4-docker-rmi删除镜像" aria-label="Permalink to &quot;9.4.4 `docker rmi`删除镜像&quot;">​</a></h3><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-f</code>：强制删除</p></blockquote></blockquote><ul><li>强制删除本地镜像 runoob/ubuntu:v4。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker rmi -f runoob/ubuntu:v4</span></span></code></pre></div><ul><li>删除全部</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker rmi -f $(docker images -aq)</span></span></code></pre></div><h3 id="_9-4-5-docker-image-prune清理镜像" tabindex="-1">9.4.5 <code>docker image prune</code>清理镜像 <a class="header-anchor" href="#_9-4-5-docker-image-prune清理镜像" aria-label="Permalink to &quot;9.4.5 `docker image prune`清理镜像&quot;">​</a></h3><p>清理残存、些临时、没有被使用的镜像文件</p><h3 id="_9-4-6-docker-tag标记镜像" tabindex="-1">9.4.6 <code>docker tag</code>标记镜像 <a class="header-anchor" href="#_9-4-6-docker-tag标记镜像" aria-label="Permalink to &quot;9.4.6 `docker tag`标记镜像&quot;">​</a></h3><p><code>docker tag [SOURCE_IMAGE][:TAG] [TARGET_IMAGE][:TAG]</code></p><blockquote><p><code>SOURCE_IMAGE</code>原始镜像<br><code>TARGET_IMAGE</code>：标记后的镜像</p></blockquote><ul><li>将镜像ubuntu:15.10标记为 runoob/ubuntu:v3 镜像。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker tag ubuntu:15.10 runoob/ubuntu:v3</span></span></code></pre></div><h3 id="_9-4-7-docker-image-is查看镜像" tabindex="-1">9.4.7 <code>docker image is</code>查看镜像 <a class="header-anchor" href="#_9-4-7-docker-image-is查看镜像" aria-label="Permalink to &quot;9.4.7 `docker image is`查看镜像&quot;">​</a></h3><p><code>docker tag [Repository][:TAG]</code></p><ul><li>查看node镜像</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker image is node</span></span></code></pre></div><h3 id="_9-4-8-docker-commit从容器创建一个新的镜像" tabindex="-1">9.4.8 <code>docker commit</code>从容器创建一个新的镜像 <a class="header-anchor" href="#_9-4-8-docker-commit从容器创建一个新的镜像" aria-label="Permalink to &quot;9.4.8 `docker commit`从容器创建一个新的镜像&quot;">​</a></h3><p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-a</code>：提交的镜像作者<br><code>-c</code>：使用Dockerfile指令来创建镜 <code>-m</code>：提交时的说明文字 <code>-p</code>：在commit时，将容器暂停</p></blockquote></blockquote><ul><li>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker commit -a &quot;jaqi.l&quot; -m &quot;jaqi.l&#39;The first image of jaqi.l&quot; a404c6c174a2  jaqi.image:v1.0.0</span></span></code></pre></div><h3 id="_9-4-9-docker-build通过文件构建新镜像" tabindex="-1">9.4.9 <code>docker build</code>通过文件构建新镜像 <a class="header-anchor" href="#_9-4-9-docker-build通过文件构建新镜像" aria-label="Permalink to &quot;9.4.9 `docker build`通过文件构建新镜像&quot;">​</a></h3><p><code>docker build [OPTIONS] PATH | URL | </code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-f</code>：dockerfile路径<br><code>-t</code>：镜像名</p></blockquote></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build -f dockerfile -t jaqi/centos:v1.0 .</span></span></code></pre></div><h3 id="_9-4-10-docker-history查看镜像的构建历史" tabindex="-1">9.4.10 <code>docker history</code>查看镜像的构建历史 <a class="header-anchor" href="#_9-4-10-docker-history查看镜像的构建历史" aria-label="Permalink to &quot;9.4.10 `docker history`查看镜像的构建历史&quot;">​</a></h3><p><code>docker history [IMAGE ID] </code></p><h3 id="_9-4-11-docker-push发布镜像" tabindex="-1">9.4.11 <code>docker push</code>发布镜像 <a class="header-anchor" href="#_9-4-11-docker-push发布镜像" aria-label="Permalink to &quot;9.4.11 `docker push`发布镜像&quot;">​</a></h3><p><code>docker push [OPTIONS] NAME[:TAG]</code></p><p>发布之前需要登陆Docker Hub或阿里云镜像仓库</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker login ******</span></span>\n<span class="line"><span>docker push jaqi/centos:v1.0</span></span></code></pre></div><h3 id="_9-4-12-docker-save将指定镜像保存成tar归档文件" tabindex="-1">9.4.12 <code>docker save</code>将指定镜像保存成tar归档文件 <a class="header-anchor" href="#_9-4-12-docker-save将指定镜像保存成tar归档文件" aria-label="Permalink to &quot;9.4.12 `docker save`将指定镜像保存成tar归档文件&quot;">​</a></h3><p><code>docker save [OPTIONS] [IMAGE...]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-o</code>：输出到的文件 将镜像 runoob/ubuntu:v3 生成 my_ubuntu_v3.tar 文档</p></blockquote></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker save -o my_ubuntu_v3.tar runoob/ubuntu:v3</span></span></code></pre></div><h3 id="_9-4-13-docker-load导入使用docker-save命令导出的镜像" tabindex="-1">9.4.13 <code>docker load</code>导入使用<code>docker save</code>命令导出的镜像 <a class="header-anchor" href="#_9-4-13-docker-load导入使用docker-save命令导出的镜像" aria-label="Permalink to &quot;9.4.13 `docker load`导入使用`docker save`命令导出的镜像&quot;">​</a></h3><p><code>docker load [OPTIONS]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-i</code>：指定导入的文件<br><code>-q</code>：精简输出信息</p></blockquote></blockquote><p>导入my_ubuntu_v3.tar</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker load --i my_ubuntu_v3.tar</span></span></code></pre></div><h2 id="_9-5-容器命令" tabindex="-1">9.5 容器命令 <a class="header-anchor" href="#_9-5-容器命令" aria-label="Permalink to &quot;9.5 容器命令&quot;">​</a></h2><p>有了镜像才能创建容器</p><h3 id="_9-5-1-docker-run运行镜像" tabindex="-1">9.5.1 <code>docker run</code>运行镜像 <a class="header-anchor" href="#_9-5-1-docker-run运行镜像" aria-label="Permalink to &quot;9.5.1 `docker run`运行镜像&quot;">​</a></h3><p><code>docker run [OPTIONS] [image]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-name</code>：容器名字<br><code>-d</code>：后台运行方式<br><code>-rt</code>：用完即删<br><code>-it</code>：交互方式进行<br><code>-v</code>：挂载数据卷<br><code>-e</code>：环境配置<br><code>-p</code>：指定容器端口</p><blockquote><p><code>ip:主机端口:容器端口</code><br><code>主机端口:容器端口</code><br><code>容器端口</code></p></blockquote></blockquote></blockquote><blockquote><blockquote><p><code>-P</code>：(大写P)随机容器端口</p></blockquote></blockquote><ul><li>启动centos并进入容器</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run --name nav_server -d  -v /home/jaqi/node_server:/home -p 80:7000 node /bin/bash</span></span></code></pre></div><h3 id="_9-5-2-docker-rm删除容器" tabindex="-1">9.5.2 <code>docker rm</code>删除容器 <a class="header-anchor" href="#_9-5-2-docker-rm删除容器" aria-label="Permalink to &quot;9.5.2 `docker rm`删除容器&quot;">​</a></h3><p><code>docker rm [image]</code></p><ul><li>批量删除多个</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> docker rm -f 09d7636201f2 104ea3abc382 c9054809ffad e3ae598e7447 f9ce4763ae59 9d86d1f77623 109b97c45b65</span></span></code></pre></div><h3 id="_9-5-3-docker-start启动容器" tabindex="-1">9.5.3 <code>docker start</code>启动容器 <a class="header-anchor" href="#_9-5-3-docker-start启动容器" aria-label="Permalink to &quot;9.5.3 `docker start`启动容器&quot;">​</a></h3><p><code>docker start [image]</code></p><h3 id="_9-5-4-docker-restart重启容器" tabindex="-1">9.5.4 <code>docker restart</code>重启容器 <a class="header-anchor" href="#_9-5-4-docker-restart重启容器" aria-label="Permalink to &quot;9.5.4 `docker restart`重启容器&quot;">​</a></h3><p><code>docker restart [image]</code></p><h3 id="_9-5-5-docker-stop停止容器" tabindex="-1">9.5.5 <code>docker stop</code>停止容器 <a class="header-anchor" href="#_9-5-5-docker-stop停止容器" aria-label="Permalink to &quot;9.5.5 `docker stop`停止容器&quot;">​</a></h3><p><code>docker stop [image]</code></p><h3 id="_9-5-6-docker-kill强制停止容器" tabindex="-1">9.5.6 <code>docker kill</code>强制停止容器 <a class="header-anchor" href="#_9-5-6-docker-kill强制停止容器" aria-label="Permalink to &quot;9.5.6 `docker kill`强制停止容器&quot;">​</a></h3><p><code>docker kill [image]</code></p><h3 id="_9-5-7-docker-ps查看正在运行的容器" tabindex="-1">9.5.7 <code>docker ps</code>查看正在运行的容器 <a class="header-anchor" href="#_9-5-7-docker-ps查看正在运行的容器" aria-label="Permalink to &quot;9.5.7 `docker ps`查看正在运行的容器&quot;">​</a></h3><p><code>docker ps [OPTIONS]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-a</code>：查看运行过的容器<br><code>-n</code>：查看最近运行的容器<br><code>-q</code>：只显示容器编号</p></blockquote></blockquote><h3 id="_9-5-8-docker-attach进入容器" tabindex="-1">9.5.8 <code>docker attach</code>进入容器 <a class="header-anchor" href="#_9-5-8-docker-attach进入容器" aria-label="Permalink to &quot;9.5.8 `docker attach`进入容器&quot;">​</a></h3><p><code>docker attach [image]</code>：进入容器正在运行的终端，不会开启新进程，退出后会自动停止容器服务</p><h3 id="_9-5-9-docker-exec进入容器" tabindex="-1">9.5.9 <code>docker exec</code>进入容器 <a class="header-anchor" href="#_9-5-9-docker-exec进入容器" aria-label="Permalink to &quot;9.5.9 `docker exec`进入容器&quot;">​</a></h3><p><code>docker exec -it [image] [COMMAND]</code>：进入容器后开启有一个新的终端</p><h3 id="_9-5-10-docker-logs查看容器日志" tabindex="-1">9.5.10 <code>docker logs</code>查看容器日志 <a class="header-anchor" href="#_9-5-10-docker-logs查看容器日志" aria-label="Permalink to &quot;9.5.10 `docker logs`查看容器日志&quot;">​</a></h3><p><code>docker logs [OPTIONS] [image]</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-f</code>：显示日志<br><code>-t</code>：显示日志条数</p></blockquote></blockquote><h3 id="_9-5-11-docker-top查看容器中的进程" tabindex="-1">9.5.11 <code>docker top</code>查看容器中的进程 <a class="header-anchor" href="#_9-5-11-docker-top查看容器中的进程" aria-label="Permalink to &quot;9.5.11 `docker top`查看容器中的进程&quot;">​</a></h3><p><code>docker top [image]</code></p><h3 id="_9-5-12-docker-inspect查看容器内部信息" tabindex="-1">9.5.12 <code>docker inspect</code>查看容器内部信息 <a class="header-anchor" href="#_9-5-12-docker-inspect查看容器内部信息" aria-label="Permalink to &quot;9.5.12 `docker inspect`查看容器内部信息&quot;">​</a></h3><p><code>docker inspect [image]</code></p><h3 id="_9-5-13-docker-cp容器与主机之间的数据拷贝" tabindex="-1">9.5.13 <code>docker cp</code>容器与主机之间的数据拷贝 <a class="header-anchor" href="#_9-5-13-docker-cp容器与主机之间的数据拷贝" aria-label="Permalink to &quot;9.5.13 `docker cp`容器与主机之间的数据拷贝&quot;">​</a></h3><p><code>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH</code></p><blockquote><p>OPTIONS：可选项</p><blockquote><p><code>-r</code>：递归</p></blockquote></blockquote><ul><li>将主机/www/jaqi目录拷贝到容器96f7f14e99ab的/www目录下。</li></ul><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /www/jaqi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 96f7f14e99ab:/www/</span></span></code></pre></div><ul><li>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中</li></ul><div class="language-zsh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">zsh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  96f7f14e99ab:/www</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /tmp/</span></span></code></pre></div><h3 id="_9-5-14-exit退出并停止镜像" tabindex="-1">9.5.14 <code>exit</code>退出并停止镜像 <a class="header-anchor" href="#_9-5-14-exit退出并停止镜像" aria-label="Permalink to &quot;9.5.14 `exit`退出并停止镜像&quot;">​</a></h3><h3 id="_9-5-15-ctrl-p-q只退出镜像不停止" tabindex="-1">9.5.15 <code>CTRL+P+Q</code>只退出镜像不停止 <a class="header-anchor" href="#_9-5-15-ctrl-p-q只退出镜像不停止" aria-label="Permalink to &quot;9.5.15 `CTRL+P+Q`只退出镜像不停止&quot;">​</a></h3><h2 id="_9-6-dockerfile" tabindex="-1">9.6 DockerFile <a class="header-anchor" href="#_9-6-dockerfile" aria-label="Permalink to &quot;9.6 DockerFile&quot;">​</a></h2><p>DockerFile就是用来构建docker镜像的构建文件（docker命令脚本）</p><h4 id="dockerfile语法规则" tabindex="-1">DockerFile语法规则： <a class="header-anchor" href="#dockerfile语法规则" aria-label="Permalink to &quot;DockerFile语法规则：&quot;">​</a></h4><ol><li>每个关键字（指令）都必须是大写字母</li><li>顺序从上到下</li><li>#表示注释</li><li>每个指令都会创建一个新的镜像层，并提交</li></ol><h4 id="dockerfile指令" tabindex="-1">DockerFile指令： <a class="header-anchor" href="#dockerfile指令" aria-label="Permalink to &quot;DockerFile指令：&quot;">​</a></h4><p><code>FROM</code>：基础镜像<br><code>MAINTAINEW</code>：镜像是谁写的，姓名+邮箱<br><code>RUN</code>：镜像构建的时候需要运行的命令<br><code>ADD</code>：添加内容<br><code>WORKDIR</code>：镜像的工作目录<br><code>VOLUME</code>：挂载的目录<br><code>EXPOSE</code>：暴露端口<br><code>CMD</code>：指定这个容器启动的时候要运行的命令，只有最后一个会生效<br><code>ENTRYPOINT</code>：指定这个容器启动的时候要运行的命令，可以追加命令<br><code>ONBUILD</code>：当构建一个被继承DockerFile，这个时候会运行ONBUILD的指令，触发指令<br><code>COPY</code>：类似ADD，将我们文件拷贝到镜像中<br><code>ENV</code>：构建时候设置环境变量</p><div class="tip custom-block"><p class="custom-block-title"><code>CMD</code>与<code>ENTRYPOINT</code>的区别</p><p><code>CMD</code>：不能再docker run的时候再追加命令，只能替换。<br><code>ENTRYPOINT</code>：可以直接追加命令</p></div><ul><li>构建一个Jaqi.L/centos</li></ul><div class="language-DockerFile vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">DockerFile</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> centos</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MAINTAINER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Jaqi.L&lt;Jaqi.l@qq.com&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ENV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MYPATH /usr/local</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WORKDIK $MYPATH</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RUN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yum -y install vim</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">EXPOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 80</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo $MYPATH</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> echo </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;---end---&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CMD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /bin/bash</span></span></code></pre></div><h2 id="_9-7-docker镜像" tabindex="-1">9.7 Docker镜像 <a class="header-anchor" href="#_9-7-docker镜像" aria-label="Permalink to &quot;9.7 Docker镜像&quot;">​</a></h2><h2 id="_9-8-docker数据卷-volume" tabindex="-1">9.8 Docker数据卷(volume) <a class="header-anchor" href="#_9-8-docker数据卷-volume" aria-label="Permalink to &quot;9.8 Docker数据卷(volume)&quot;">​</a></h2><h4 id="数据卷联合文件系统" tabindex="-1">数据卷联合文件系统 <a class="header-anchor" href="#数据卷联合文件系统" aria-label="Permalink to &quot;数据卷联合文件系统&quot;">​</a></h4><p><img src="'+i+'" alt="docker"></p><h4 id="数据共享" tabindex="-1">数据共享 <a class="header-anchor" href="#数据共享" aria-label="Permalink to &quot;数据共享&quot;">​</a></h4><p>容器之间共享数据的一种技术（将docker容器中的目录挂载到外部服务器上【卷名】），实现容器的持久化和同步操作，而且容器间也可以数据共享。</p><p><code>docker run -v [服务器目录(卷名)]:[容器目录]:[r0/rw]</code></p><p>容器限制权限：</p><blockquote><p><code>r0</code>:只读<br><code>rw</code>或不填:可读可写</p></blockquote><ul><li>将容器的home目录挂载到服务器的/home/test目录</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -it -v /home/test:/home</span></span></code></pre></div><h4 id="具名和匿名挂载" tabindex="-1">具名和匿名挂载： <a class="header-anchor" href="#具名和匿名挂载" aria-label="Permalink to &quot;具名和匿名挂载：&quot;">​</a></h4><p>（不指定服务器的目录（卷名），自动挂载到<code>/var/lib/docker/volumes/xxx/_data</code>）</p><h4 id="docker-volume查看卷" tabindex="-1"><code>docker volume</code>查看卷 <a class="header-anchor" href="#docker-volume查看卷" aria-label="Permalink to &quot;`docker volume`查看卷&quot;">​</a></h4><p><code>docker volume ls</code>查看全部卷<br><code>docker volume inspect [卷名]</code>查看卷详情</p><h4 id="数据卷容器" tabindex="-1">数据卷容器 <a class="header-anchor" href="#数据卷容器" aria-label="Permalink to &quot;数据卷容器&quot;">​</a></h4><p><code>--volume-from</code>通过一个容器给其他容器共享数据。</p><ul><li>docker01的数据同步到docker02</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker run -it --name docker02 --volume-from docker01 jaqi/centos:v1.0</span></span></code></pre></div><h2 id="_9-9-docker网络" tabindex="-1">9.9 Docker网络 <a class="header-anchor" href="#_9-9-docker网络" aria-label="Permalink to &quot;9.9 Docker网络&quot;">​</a></h2>',160),t=[r];function n(p,k,h,u,b,m){return o(),a("div",null,t)}const v=e(l,[["render",n]]);export{q as __pageData,v as default};
