import{_ as i,c as s,o as a,aR as e,aU as l,aV as t,aW as o,aX as d,aY as n,aZ as h,a_ as c,a$ as p,b0 as r,b1 as k}from"./chunks/framework.BwSdcL0X.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/css/layout.md","filePath":"frontend/css/layout.md","lastUpdated":1715234692000}'),g={name:"frontend/css/layout.md"},u=e('<h2 id="_2-6-1-固定布局" tabindex="-1">2.6.1 固定布局 <a class="header-anchor" href="#_2-6-1-固定布局" aria-label="Permalink to &quot;2.6.1 固定布局&quot;">​</a></h2><h4 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ul><li><p>固定宽度布局更容易使用，在设计方面更容易定制</p></li><li><p>在所有浏览器中宽度一样,不设置min-width和max-width，来防止内容缩放引起的布局混乱</p></li></ul><h4 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ul><li><p>对于使用高分辨率的用户，固定宽度布局会留下很大的空白</p></li><li><p>屏幕分辨率过小时需要垂直滚动条</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li>设置了固定宽度的外包裹，里面的各个模块也是固定宽度而非百分比</li><li>大多数设计者选择960或760px的固定宽度。960px最适合1024×768或者更高的分辨率，有一点空间设置margin。如果设计者想让布局适应800×600分辨率的用户，可以使 用760px的宽度，它仍然适用于更大的分辨率</li></ol></div><h2 id="_2-6-2-流体布局" tabindex="-1">2.6.2 流体布局 <a class="header-anchor" href="#_2-6-2-流体布局" aria-label="Permalink to &quot;2.6.2 流体布局&quot;">​</a></h2><p>流体布局，主体部分都是用了百分比宽度，因此可以自适应用户的分辨率</p><h4 id="优点-1" tabindex="-1">优点： <a class="header-anchor" href="#优点-1" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><ul><li><p>流动布局页面对用户更友好，因为它能自适应用户的设置</p></li><li><p>页面周围的空白区域在所有分辨率和浏览器下都是相同的，在视觉上更美观</p></li></ul><h4 id="缺点-1" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><ul><li><p>设计者更难控制用户所见，并可能忽略掉一些错误，因为在特定的分辨率下看起来好的</p></li><li><p>视频以及其他设置了宽度的内容可能需要多种宽度以适应不同分辨率的用户</p></li></ul><h2 id="_2-6-3-浮动布局" tabindex="-1">2.6.3 浮动布局 <a class="header-anchor" href="#_2-6-3-浮动布局" aria-label="Permalink to &quot;2.6.3 浮动布局&quot;">​</a></h2><p>根据内容是固定尺寸还是百分比有可以划分为：流体浮动布局、固定浮动布局</p><h2 id="_2-6-4-定位布局" tabindex="-1">2.6.4 定位布局 <a class="header-anchor" href="#_2-6-4-定位布局" aria-label="Permalink to &quot;2.6.4 定位布局&quot;">​</a></h2><p>根据内容是固定尺寸还是百分比有可以划分为：流体定位布局、固定定位布局</p><p>参照基准点：将父元素设为相对定位，且不设置坐标，如果父元素设置了相对定位，子元素的绝对定位将以父元素的基准点为参照基准点</p><h2 id="_2-6-5-多列布局" tabindex="-1">2.6.5 多列布局 <a class="header-anchor" href="#_2-6-5-多列布局" aria-label="Permalink to &quot;2.6.5 多列布局&quot;">​</a></h2><p>多列属性（CSS3新增）:</p><ul><li><p><code>columns</code>设置<code>column-width</code>和<code>column-count</code>的简写属性</p></li><li><p><code>column-width</code>规定列的宽度。(该宽度为缩放时的最小宽度，默认为<code>auto</code>)</p></li><li><p><code>column-count</code>规定元素应该被分隔的列数。默认为<code>auto</code></p></li><li><p><code>column-rule</code>设置所有<code>column-rule-*</code>属性的简写属性</p></li><li><p><code>column-rule-color</code>规定列之间规则的颜色</p></li><li><p><code>column-rule-style</code>规定列之间规则的样式</p></li><li><p><code>column-rule-width</code>规定列之间规则的宽度</p></li><li><p><code>column-span</code>规定元素应该横跨的列数。默认值为<code>1</code>，可以设置为<code>all</code></p></li><li><p><code>column-gap</code>规定列之间的间隔</p></li><li><p><code>column-fill</code>规定如何填充列。主流浏览器都不支持<code>column-fill</code>属性</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>传统布局实现多列（3列及以上）布局的问题：实现起来麻烦，很不方便、后期维护更改困难</p></div><h2 id="_2-6-6-弹性布局-弹性伸缩布局" tabindex="-1">2.6.6 弹性布局(弹性伸缩布局) <a class="header-anchor" href="#_2-6-6-弹性布局-弹性伸缩布局" aria-label="Permalink to &quot;2.6.6 弹性布局(弹性伸缩布局)&quot;">​</a></h2><p>事实上它是一种新类型的盒子模型，也称作弹性伸缩盒布局：旨在提供一个更加有效的方式来布置，对齐和分布在容器之间的各项内容，即使它们的大小是未知或者动态变化的</p><p>弹性布局的主要思想是让容器有能力来改变项目的宽度和高度，以填满可用空间（主要是为了容纳所有类型的显示设备和屏幕尺寸）的能力</p><h4 id="优点-2" tabindex="-1">优点： <a class="header-anchor" href="#优点-2" aria-label="Permalink to &quot;优点：&quot;">​</a></h4><p>应用恰当的弹性布局对用户十分友好。页面中所有元素可以随着用户的偏好缩放</p><p>对于同时喜欢流动和定宽布局的设计师来说，弹性布局是完美的，因为前两种布局的优点在弹性布局中都能找到</p><h4 id="缺点-2" tabindex="-1">缺点： <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点：&quot;">​</a></h4><p>需要花更多时间理解和测试，让布局适合所有用户</p><p>这种布局类型相对于其他两个更难制作</p><h4 id="flex弹性布局属性-对父元素设置" tabindex="-1"><code>flex</code>弹性布局属性(对父元素设置) <a class="header-anchor" href="#flex弹性布局属性-对父元素设置" aria-label="Permalink to &quot;`flex`弹性布局属性(对父元素设置)&quot;">​</a></h4><p>最新版：</p><blockquote><ul><li><code>display：flex</code>将对象作为弹性伸缩盒显示</li><li><code>display：inline-flex</code>将对象作为内联块级弹性伸缩盒显示</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>过渡版写法：<code>flexbox</code>，<code>inline-flexbox</code></li><li>老版本写法：<code>box</code>，<code>inline-box</code></li></ul></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><code>float</code>、<code>clear</code>、<code>vertical-align</code>在<code>flex</code>项目中不起作用</li><li>css多列（CSS columns）在弹性盒子中不起作用</li></ul></div></blockquote><h4 id="flex-direction-用于父元素-设置子元素在父元素中的排列方式" tabindex="-1"><code>flex-direction</code>(用于父元素):设置子元素在父元素中的排列方式 <a class="header-anchor" href="#flex-direction-用于父元素-设置子元素在父元素中的排列方式" aria-label="Permalink to &quot;`flex-direction`(用于父元素):设置子元素在父元素中的排列方式&quot;">​</a></h4><blockquote><ul><li><code>row</code>（默认值）横向从左到右排列</li><li><code>row-reverse</code>反转横向从右到左排列</li><li><code>column</code>纵向排列</li><li><code>column-reverse</code>反转纵向排列，从后往前排，最后一项排在最上面</li></ul></blockquote><p><img src="'+l+'" alt="flex-direction"></p><h4 id="flex-wrap-用于父元素-设置子元素超出父元素后是否换行" tabindex="-1"><code>flex-wrap</code>(用于父元素) 设置子元素超出父元素后是否换行 <a class="header-anchor" href="#flex-wrap-用于父元素-设置子元素超出父元素后是否换行" aria-label="Permalink to &quot;`flex-wrap`(用于父元素) 设置子元素超出父元素后是否换行&quot;">​</a></h4><blockquote><ul><li><code>nowrap</code>当子元素溢出父容器时不换行</li><li><code>wrap</code>当子元素溢出父容器时自动换行</li><li><code>wrap-reverse</code>当子元素溢出父容器时自动换行,方向同 <code>wrap</code>反转排列</li></ul></blockquote><p><img src="'+t+'" alt="flex-wrap"></p><h4 id="flex-flow-用于父元素-复合属性-可以同时设置-flex-direction-flex-wrap" tabindex="-1"><code>flex-flow</code>(用于父元素)复合属性: 可以同时设置 <code>flex-direction</code>/<code>flex-wrap</code> <a class="header-anchor" href="#flex-flow-用于父元素-复合属性-可以同时设置-flex-direction-flex-wrap" aria-label="Permalink to &quot;`flex-flow`(用于父元素)复合属性: 可以同时设置 `flex-direction`/`flex-wrap`&quot;">​</a></h4><h4 id="justify-content-用于父元素-设置子元素的水平对齐方式" tabindex="-1"><code>justify-content</code>(用于父元素) 设置子元素的水平对齐方式 <a class="header-anchor" href="#justify-content-用于父元素-设置子元素的水平对齐方式" aria-label="Permalink to &quot;`justify-content`(用于父元素) 设置子元素的水平对齐方式&quot;">​</a></h4><blockquote><ul><li><code>flex-start</code>（默认值）弹性盒子元素将向行起始位置对齐</li><li><code>flex-end</code>弹性盒子元素将向行结束位置对齐</li><li><code>center</code>弹性盒子元素将向行中间位置对齐</li><li><code>space-between</code>弹性盒子元素会平均地分布在行里</li><li><code>space-around</code>弹性盒子元素会平均地分布在行里，两端保留子元素与子元素之间间距大小的一半<code>1:2:2:1</code></li></ul></blockquote><p><img src="'+o+'" alt="justify-content"></p><h4 id="align-items-用于父元素-设置子元素的垂直对齐方式-适用于子元素单行分布" tabindex="-1"><code>align-items</code>(用于父元素) 设置子元素的垂直对齐方式（适用于子元素单行分布） <a class="header-anchor" href="#align-items-用于父元素-设置子元素的垂直对齐方式-适用于子元素单行分布" aria-label="Permalink to &quot;`align-items`(用于父元素) 设置子元素的垂直对齐方式（适用于子元素单行分布）&quot;">​</a></h4><blockquote><ul><li><code>flex-start</code>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界</li><li><code>flex-end</code>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界</li><li><code>center</code>弹性盒子元素在该行的侧轴（纵轴）上居中放置</li><li><code>baseline</code>如弹性盒子元素的行内轴与侧轴为同一条，则该值与<code>flex-start</code>等效。其它情况下，该值将参与基线对齐</li><li><code>stretch</code>（默认值）如果指定侧轴大小的属性值为<code>auto</code>，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照<code>min/ma* x-width/height</code>属性的限制</li></ul></blockquote><p><img src="'+d+'" alt="align-items"></p><h4 id="align-self-用于子元素-设置子元素自身在侧轴方向上的对齐方式" tabindex="-1"><code>align-self</code>:(用于子元素)设置子元素自身在侧轴方向上的对齐方式 <a class="header-anchor" href="#align-self-用于子元素-设置子元素自身在侧轴方向上的对齐方式" aria-label="Permalink to &quot;`align-self`:(用于子元素)设置子元素自身在侧轴方向上的对齐方式&quot;">​</a></h4><blockquote><ul><li><code>auto</code>如果<code>align-self</code>的值为<code>auto</code>，则其计算值为元素的父元素的<code>align-items</code>值，如果其没有父元素，则计算值为 <code>stretch</code></li><li><code>flex-start</code>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界</li><li><code>flex-end</code>弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界</li><li><code>center</code>弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）</li><li><code>baseline</code>如弹性盒子元素的行内轴与侧轴为同一条，则该值与<code>flex-start</code>等效。其它情况下，该值将参与基线对齐</li><li><code>stretch</code>如果指定侧轴大小的属性值为<code>auto</code>，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸</li></ul></blockquote><p><img src="'+n+'" alt="align-self"></p><h4 id="align-content-用于父元素-设置子元素的垂直对齐方式-适用于子元素多行分布" tabindex="-1"><code>align-content</code>:(用于父元素) 设置子元素的垂直对齐方式（适用于子元素多行分布） <a class="header-anchor" href="#align-content-用于父元素-设置子元素的垂直对齐方式-适用于子元素多行分布" aria-label="Permalink to &quot;`align-content`:(用于父元素) 设置子元素的垂直对齐方式（适用于子元素多行分布）&quot;">​</a></h4><blockquote><ul><li><code>flex-start</code>各行向弹性盒容器的起始位置堆叠。弹性盒容器中第一行的侧轴起始边界紧靠住该弹性盒容器的侧轴起始边界，之后的每一行都紧靠住前面一行</li><li><code>flex-end</code>各行向弹性盒容器的结束位置堆叠。弹性盒容器中最后一行的侧轴起结束界紧靠住该弹性盒容器的侧轴结束边界，之后的每一行都紧靠住前面一行</li><li><code>center</code>各行向弹性盒容器的中间位置堆叠。各行两两紧靠住同时在弹性盒容器中居中对齐，保持弹性盒容器的侧轴起始内容边界和第一行之间的距离与该容器的侧轴结束内容边界与第最后一行之间的距离相等</li><li><code>space-between</code>各行在弹性盒容器中平均分布</li><li><code>space-around</code>各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半</li><li><code>stretch</code>（默认值）各行将会伸展以占用剩余的空间</li></ul></blockquote><p><img src="'+h+'" alt="align-content"></p><h4 id="order-适用于弹性盒模型容器子元素-用整数值来定义排列顺序-数值小的排在前面。可以为负值" tabindex="-1"><code>order</code>(适用于弹性盒模型容器子元素) 用整数值来定义排列顺序，数值小的排在前面。可以为负值 <a class="header-anchor" href="#order-适用于弹性盒模型容器子元素-用整数值来定义排列顺序-数值小的排在前面。可以为负值" aria-label="Permalink to &quot;`order`(适用于弹性盒模型容器子元素) 用整数值来定义排列顺序，数值小的排在前面。可以为负值&quot;">​</a></h4><p><img src="'+c+'" alt="order"></p><h4 id="flex-grow-适用于弹性盒模型容器子元素-设置元素的放大比例" tabindex="-1"><code>flex-grow</code>(适用于弹性盒模型容器子元素) 设置元素的放大比例 <a class="header-anchor" href="#flex-grow-适用于弹性盒模型容器子元素-设置元素的放大比例" aria-label="Permalink to &quot;`flex-grow`(适用于弹性盒模型容器子元素) 设置元素的放大比例&quot;">​</a></h4><blockquote><ul><li><code>1</code>默认,如果空间变大，该元素将变大</li><li><code>0</code>使存在剩余空间，也不会放大</li></ul></blockquote><p><img src="'+p+'" alt="flex-grow"></p><h4 id="flex-shrink-适用于弹性盒模型容器子元素-设置元素的缩小比例" tabindex="-1"><code>flex-shrink</code>(适用于弹性盒模型容器子元素) 设置元素的缩小比例 <a class="header-anchor" href="#flex-shrink-适用于弹性盒模型容器子元素-设置元素的缩小比例" aria-label="Permalink to &quot;`flex-shrink`(适用于弹性盒模型容器子元素) 设置元素的缩小比例&quot;">​</a></h4><blockquote><ul><li><code>1</code>默认,如果空间不足，该项目将缩小</li><li><code>0</code>空间不足时，该元素不会缩小</li></ul></blockquote><p><img src="'+r+'" alt="flex-shrink"></p><h4 id="flex-basis-适用于弹性盒模型容器子元素" tabindex="-1"><code>flex-basis</code>(适用于弹性盒模型容器子元素) <a class="header-anchor" href="#flex-basis-适用于弹性盒模型容器子元素" aria-label="Permalink to &quot;`flex-basis`(适用于弹性盒模型容器子元素)&quot;">​</a></h4><blockquote><ul><li><code>auto</code>无特定宽度值，取决于其它属性值</li><li><code>length</code>用长度值/百分比来定义宽度。不允许负值</li></ul></blockquote><h4 id="flex-适用于弹性盒模型子元素-是-flex-grow、flex-shrink、flex-basis的复合属性" tabindex="-1"><code>flex</code>(适用于弹性盒模型子元素) 是 <code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>的复合属性 <a class="header-anchor" href="#flex-适用于弹性盒模型子元素-是-flex-grow、flex-shrink、flex-basis的复合属性" aria-label="Permalink to &quot;`flex`(适用于弹性盒模型子元素) 是 `flex-grow`、`flex-shrink`、`flex-basis`的复合属性&quot;">​</a></h4><blockquote><ul><li><code>none</code>：<code>none</code>关键字的计算值为:<code> 0 0 auto</code>（默认）</li></ul></blockquote><h2 id="_2-6-7-grid-网格布局" tabindex="-1">2.6.7 Grid 网格布局 <a class="header-anchor" href="#_2-6-7-grid-网格布局" aria-label="Permalink to &quot;2.6.7 Grid 网格布局&quot;">​</a></h2><p><a href="https://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noreferrer">阮一峰CSS Grid 网格布局教程</a></p><blockquote><ul><li><code>display：grid</code>指定一个容器采用网格布局（块级元素）</li><li><code>display：inline-grid</code>指定一个容器采用网格布局（行内块级元素）</li></ul></blockquote><p>采用网格布局的区域，称为容器<code>container</code>，容器内部采用网格定位的子元素，称为项目<code>item</code></p><h4 id="fr单位" tabindex="-1"><code>fr</code>单位 <a class="header-anchor" href="#fr单位" aria-label="Permalink to &quot;`fr`单位&quot;">​</a></h4><p>表示<code>Grid</code>布局中中残余空间的一部分，一般来说<code>1fr</code>表示<code>100%</code>的残余空间,<code>.25fr</code>表示<code>25%</code>的残余空间</p><h4 id="grid-template-columns-用于父元素-设置每一列的列宽" tabindex="-1"><code>grid-template-columns</code>(用于父元素):设置每一列的列宽 <a class="header-anchor" href="#grid-template-columns-用于父元素-设置每一列的列宽" aria-label="Permalink to &quot;`grid-template-columns`(用于父元素):设置每一列的列宽&quot;">​</a></h4><blockquote><ul><li><code>none</code>（默认值）不指定列的大小</li><li><code>auto</code>列的大小由容器的大小和列中网格元素内容的大小决定</li><li><code>max-content</code>每列的大小设置为该列中最大网格元素的大小</li><li><code>min-content</code>每列的大小设置为该列中最小网格元素的大小</li><li><code>length</code>长度值，可以是<code>px</code>、<code>fr</code>为单位的数值或百分比<code>%</code>、<code>0</code>是默认值</li><li><code>initial</code>将此属性设置为默认值</li><li><code>inherit</code> 从父元素继承该属性</li></ul></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> auto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="grid-template-rows-用于父元素-设置每一行的行高" tabindex="-1"><code>grid-template-rows</code>(用于父元素):设置每一行的行高 <a class="header-anchor" href="#grid-template-rows-用于父元素-设置每一行的行高" aria-label="Permalink to &quot;`grid-template-rows`(用于父元素):设置每一行的行高&quot;">​</a></h4><blockquote><ul><li><code>none</code>（默认值）不指定行的大小</li><li><code>auto</code>行的大小由容器的大小和行中网格元素内容的大小决定</li><li><code>max-content</code>每行的大小设置为该行中最大网格元素的大小</li><li><code>min-content</code>每行的大小设置为该行中最小网格元素的大小</li><li><code>length</code>长度值，可以是<code>px</code>、<code>fr</code>为单位的数值或百分比<code>%</code>、<code>0</code>是默认值</li><li><code>initial</code>将此属性设置为默认值</li><li><code>inherit</code> 从父元素继承该属性</li></ul></blockquote><h4 id="repeat-函数-批量设置重复值" tabindex="-1"><code>repeat()</code>函数，批量设置重复值 <a class="header-anchor" href="#repeat-函数-批量设置重复值" aria-label="Permalink to &quot;`repeat()`函数，批量设置重复值&quot;">​</a></h4><p>该函数可以用于 CSS Grid 属性中 <code>grid-template-columns</code> 和 <code>grid-template-rows</code><br><code>repeat(num,a b c)</code>第一个参数是重复的次数，第二个参数是所要重复的值</p><blockquote><ul><li><code>length</code>长度值，可以是<code>px</code>、<code>fr</code>为单位的数值或百分比<code>%</code>、<code>0</code>是默认值</li><li><code>max-content</code>所有网格元素中最大的</li><li><code>min-content</code>所有网格元素中最小的</li><li><code>auto</code></li><li><code>auto-fill</code></li><li><code>auto-fit</code></li></ul></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 重复3次，重复单元是50px 100px 50px */</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 重复3次，重复单元是50px */</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="minmax-函数-产生一个长度范围" tabindex="-1"><code>minmax()</code>函数，产生一个长度范围 <a class="header-anchor" href="#minmax-函数-产生一个长度范围" aria-label="Permalink to &quot;`minmax()`函数，产生一个长度范围&quot;">​</a></h4><p>它接受两个参数，分别为最小值和最大值</p><blockquote><ul><li><code>length</code>长度值，可以是<code>px</code>、<code>fr</code>为单位的数值或百分比<code>%</code>、<code>0</code>是默认值</li><li><code>max-content</code></li><li><code>min-content</code></li><li><code>auto</code></li><li><code>auto-fill</code></li><li><code>auto-fit</code></li></ul></blockquote><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inline-grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">minmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="网格线的名称" tabindex="-1"><code>[ ]</code>网格线的名称 <a class="header-anchor" href="#网格线的名称" aria-label="Permalink to &quot;`[ ]`网格线的名称&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [c1] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [c2] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [c3] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [c4];</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [r1] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [r2] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [r3] </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [r4 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="grid-row-gap-用于父元素-设置行间距" tabindex="-1"><code>grid-row-gap</code>(用于父元素):设置行间距 <a class="header-anchor" href="#grid-row-gap-用于父元素-设置行间距" aria-label="Permalink to &quot;`grid-row-gap`(用于父元素):设置行间距&quot;">​</a></h4><h4 id="grid-column-gap-用于父元素-设置列间距" tabindex="-1"><code>grid-column-gap</code>(用于父元素):设置列间距 <a class="header-anchor" href="#grid-column-gap-用于父元素-设置列间距" aria-label="Permalink to &quot;`grid-column-gap`(用于父元素):设置列间距&quot;">​</a></h4><h4 id="grid-gap-用于父元素-设置行、列间距" tabindex="-1"><code>grid-gap</code>(用于父元素):设置行、列间距 <a class="header-anchor" href="#grid-gap-用于父元素-设置行、列间距" aria-label="Permalink to &quot;`grid-gap`(用于父元素):设置行、列间距&quot;">​</a></h4><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-columns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-template-rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  grid-gap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="grid-template-areas-用于父元素-属性在网格布局中规定区域" tabindex="-1"><code>grid-template-areas</code>(用于父元素):属性在网格布局中规定区域 <a class="header-anchor" href="#grid-template-areas-用于父元素-属性在网格布局中规定区域" aria-label="Permalink to &quot;`grid-template-areas`(用于父元素):属性在网格布局中规定区域&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">主轴与侧轴的概念</p><p>主轴就是弹性盒子子元素沿着排列的轴；与主轴垂直的轴称为侧轴</p><p>row ,则主轴是水平方向，侧轴是垂直方向</p><p>column,则主轴是垂直方向，侧轴是水平方向</p><p>注：基线、底线、定线、中线</p><p><img src="'+k+'" alt="line"></p></div>',91),E=[u];function m(y,b,x,f,F,C){return a(),s("div",null,E)}const B=i(g,[["render",m]]);export{_ as __pageData,B as default};
