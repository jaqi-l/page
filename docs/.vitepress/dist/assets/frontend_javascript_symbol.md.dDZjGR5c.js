import{_ as i,c as a,o as e,aR as s}from"./chunks/framework.DO9sehX0.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/symbol.md","filePath":"frontend/javascript/symbol.md","lastUpdated":1715234692000}'),l={name:"frontend/javascript/symbol.md"},o=s(`<h2 id="_3-3-1-基本概念" tabindex="-1">3.3.1 基本概念 <a class="header-anchor" href="#_3-3-1-基本概念" aria-label="Permalink to &quot;3.3.1 基本概念&quot;">​</a></h2><p>表达式：由常量/变量和运算符组成的短语；</p><p>操作数：表达式中的常量和变量成为操作数；</p><p>运算符：表达式中起运算作用的符合成为运算符；</p><p>单目运算符：只能带一个操作数的成为单目运算符；(也叫一元运算符)</p><p>多目运算符：带多个操作数的成为多目运算符；</p><h2 id="_3-3-2-用于字符串的-运算符" tabindex="-1">3.3.2 用于字符串的“+”运算符 <a class="header-anchor" href="#_3-3-2-用于字符串的-运算符" aria-label="Permalink to &quot;3.3.2 用于字符串的“+”运算符&quot;">​</a></h2><p><code>+</code>运算符用于把文本值或字符串变量加起来（连接起来）。</p><p>要想在两个字符串之间增加空格，需要把空格插入一个字符串之中：</p><p>如果把数字与字符串相加，结果将成为字符串。</p><h2 id="_3-3-3-赋值运算符" tabindex="-1">3.3.3 赋值运算符： <a class="header-anchor" href="#_3-3-3-赋值运算符" aria-label="Permalink to &quot;3.3.3 赋值运算符：&quot;">​</a></h2><p>赋值运算符用于给 JavaScript 变量赋值。</p><p><code>=</code> x=y</p><p><code>+=</code> x+=y 等价于 x=x+y</p><p><code>-=</code> x-=y 等价于 x=x-y</p><p><code>*=</code> x*=y 等价于 x=x*y</p><p><code>/=</code> x/=y 等价于 x=x/y</p><p><code>%=</code> x%=y 等价于 x=x%y</p><h2 id="_3-3-4-算术运算符" tabindex="-1">3.3.4 算术运算符 <a class="header-anchor" href="#_3-3-4-算术运算符" aria-label="Permalink to &quot;3.3.4 算术运算符&quot;">​</a></h2><ul><li><p>加减乘除：<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code></p></li><li><p>取模运算符：<code>%</code></p></li><li><p>正负运算符：<code>+</code>（如果连接的是两个数字字符串，则数字相连） <code>-</code>（字符串能变成数字的自动变成数字后相减）“20”+2-6=196</p></li><li><p>递增递减运算符：<code>++</code>、<code>--</code>:使数字递增/递减1(注意前置和后置的区别)</p></li></ul><blockquote><p>若没有赋值前置和后置没有区别。<br> 若有赋值:前置则先计算递增/减后赋值，后置则相反。</p></blockquote><h2 id="_3-3-5-比较运算符" tabindex="-1">3.3.5 比较运算符 <a class="header-anchor" href="#_3-3-5-比较运算符" aria-label="Permalink to &quot;3.3.5 比较运算符&quot;">​</a></h2><p>比较运算符是比较两个数的大小的运算符，返回的是一个布尔值。</p><ul><li>相等运算符 <code>==</code> 判断两个操作数是否相等。不同的数据类型会自动转换为相等的数据类型再做比较。</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">（</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">） </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//false</span></span></code></pre></div><ul><li><p>等同运算符 <code>===</code> 全等（值和类型），严格意义的相等，两个操作数的值和他们的类型必须完全一致。</p></li><li><p>不等于：<code>!=</code></p></li><li><p>不等同运算符： <code>!==</code></p></li><li><p>大于：<code>&gt;</code></p></li><li><p>小于：<code>&lt;</code></p></li><li><p>大于或等于：<code>&gt;=</code></p></li><li><p>小于或等于：<code>&lt;=</code></p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>若一个是数值字符串，一个是数值，字符串会自动转换成数值进行比较。</li><li>若两个都是字符串，则比较首个数字的大小。</li><li>字母字符串会转换成对应的ASCII码(较少用到，不做讲解，知道即可)</li><li>布尔值的false和true会转换成0和1</li></ul></div><h2 id="_3-3-6-逻辑运算符" tabindex="-1">3.3.6 逻辑运算符 <a class="header-anchor" href="#_3-3-6-逻辑运算符" aria-label="Permalink to &quot;3.3.6 逻辑运算符&quot;">​</a></h2><p>逻辑运算符用于测定变量或值之间的逻辑。</p><ul><li><p><code>&amp;&amp;</code> and(与)</p></li><li><p><code>||</code> or(或)</p></li><li><p><code>! </code>not(非)</p></li></ul><h2 id="_3-3-7-条件运算符" tabindex="-1">3.3.7 条件运算符 <a class="header-anchor" href="#_3-3-7-条件运算符" aria-label="Permalink to &quot;3.3.7 条件运算符&quot;">​</a></h2><p>根据条件在两个语句中执行其中的一个，使用符号 ？：语法如下：</p><p>条件表达式？语句1：语句2</p><p>参数说明：</p><p>条件表达式，结果会被作为布尔值处理</p><p>语句1：如果条件表达式返回true则执行</p><p>语句2：如果条件表达式返回false则执行</p><h2 id="_3-3-8-运算符优先级" tabindex="-1">3.3.8 运算符优先级 <a class="header-anchor" href="#_3-3-8-运算符优先级" aria-label="Permalink to &quot;3.3.8 运算符优先级&quot;">​</a></h2><p>运算符优先级描述了在计算表达式时执行运算的顺序。先执行具有较高优先级的运算，然后执行较低优先级的运算。例如，先执行相乘，再执行相加。</p><p>优先级顺序从上往下依次顺序，从左到右：</p><ol><li>小括号<code>()</code></li></ol><p>有括号先算括号里面的；</p><ol start="2"><li>一元运算符</li></ol><p>加加<code>++</code>、减减<code>--</code>、非<code>!</code></p><ol start="3"><li>算数运算符</li></ol><p>乘<code>*</code>、除<code>/</code>、取于<code>%</code>、加<code>+</code>、减<code>-</code></p><ol start="4"><li>关系运算符</li></ol><p>大于<code>&gt;</code>、大于等于<code>&gt;=</code>、小于<code>&lt;</code>、小于等于<code>&lt;=</code></p><ol start="5"><li>相等运算符</li></ol><p>等于<code>==</code>、不等于<code>!=</code>、全等于<code>===</code>、不全等<code>!==</code></p><ol start="6"><li>逻辑运算符</li></ol><p>且<code>&amp;&amp;</code>、或<code>||</code></p><ol start="7"><li><p>点符号<code>.</code>(访问对象)</p></li><li><p>赋值运算符<code>=</code></p></li><li><p>逗号运算符<code>,</code></p></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{n:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a → {n:1}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{n:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// .优先级高于=  所以 此时  a → {n:1,x:undefined}   然后在执行 执行a = {n:2}  所以 a → {n:2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {n:2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.x) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div>`,54),p=[o];function d(t,c,n,h,r,k){return e(),a("div",null,p)}const g=i(l,[["render",d]]);export{u as __pageData,g as default};
