import{_ as o,c as e,o as d,aR as c}from"./chunks/framework.BwSdcL0X.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/css/box.md","filePath":"frontend/css/box.md","lastUpdated":1715234692000}'),i={name:"frontend/css/box.md"},l=c('<p>CSS 盒模型规定了处理元素内容、内边距、边框 和 外边距 的方式。</p><p>最内部分是元素内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距。</p><h2 id="_2-4-1常用单位" tabindex="-1">2.4.1常用单位 <a class="header-anchor" href="#_2-4-1常用单位" aria-label="Permalink to &quot;2.4.1常用单位&quot;">​</a></h2><ol><li><code>px</code></li><li><code>%</code>相对于父元素</li><li><code>vh</code>相对于视口高度，1vh=1%</li><li><code>vw</code>相对于视口宽度，1vw=1%</li><li><code>vmax</code>选择<code>vw</code>和<code>vh</code>中较小的一个值</li><li><code>vmin</code>选择<code>vw</code>和<code>vh</code>中较大的一个值</li><li><code>em</code>相对于父元素字体大小倍数</li><li><code>rem</code>相对于<code>html</code>字体大小的倍数</li><li><code>svh</code></li></ol><h3 id="动态视口单位-css-2023新增" tabindex="-1">动态视口单位(<span style="color:red;">*</span>CSS 2023新增) <a class="header-anchor" href="#动态视口单位-css-2023新增" aria-label="Permalink to &quot;动态视口单位(&lt;span style=&quot;color: red&quot;&gt;*&lt;/span&gt;CSS 2023新增)&quot;">​</a></h3><p>如果想让一个元素占满全屏高度，可以将高度 <code>height</code> 设置为 <code>100vh</code>，这样你就有了一个随着视口的改变而改变大小的全屏元素，但在移动端事实并非如此，地址栏与工具栏的影响，导致你设置的全屏元素要高于真实的屏幕可见高度。</p><ul><li>视口单位分为：<br> 大视口<code>lv*</code>(地址栏与工具栏的收回状态)<br> 小视口<code>sv*</code>(地址栏与工具栏的展开状态)<br> 动态视口<code>dv*</code></li></ul><blockquote><p>大视口的具体单位： <code>lvw</code>、<code>lvh</code>、<code>lvi</code>、<code>lvb</code>、<code>lvmin</code>、<code>lvmax</code><br> 小视口的具体单位： <code>svw</code>、<code>svh</code>、<code>svi</code>、<code>svb</code>、<code>svmin</code>、<code>svmax</code><br> 动态视口的具体单位： <code>dvw</code>、<code>dvh</code>、<code>dvi</code>、<code>dvb</code>、<code>dvmin</code>、<code>dvmax</code></p></blockquote><div class="tip custom-block"><p class="custom-block-title">TIP</p><ol><li><code>dvw</code>、<code>dvh</code>、<code>dvmin</code>、<code>dvmax</code> 对应 <code>vw</code>、<code>vh</code>、<code>vmax</code>、<code>vmin</code></li><li><code>vi</code>Viewport Inline代表文档的内联方向。在水平书写方向上，这对应于视口的宽度，而在垂直书写方向上，这表示视口的高度。记住 inline 方向的简单方法是记住它与文本的方向相同</li><li><code>vb</code>Viewport block 代表文档的块方向。这与 vi 水平书写方向相反，这将对应于视口高度，而在垂直文档中，这将表示视口的宽度</li></ol></div><h2 id="_2-4-2元素的尺寸" tabindex="-1">2.4.2元素的尺寸: <a class="header-anchor" href="#_2-4-2元素的尺寸" aria-label="Permalink to &quot;2.4.2元素的尺寸:&quot;">​</a></h2><p><code>height</code>:设置元素的高度。</p><p><code>width</code>:设置元素的宽度。</p><p><code>max-height</code>:设置元素的最大高度。</p><p><code>max-width</code> 设置元素的最大宽度。</p><p><code>min-height</code> 设置元素的最小高度。</p><p><code>min-width</code> 设置元素的最小宽度。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当属性值用百分比时是相对于父元素的尺寸来说的。 最大最小宽高等动态控制详见专题：移动端适配-媒体查询</p></div><p><code>aspect-ratio</code> 设置元素的纵横比。</p><p><code>box-sizing</code>：</p><blockquote><p>content-box（默认值）仅包括内容的宽高<br> border-box 内容的宽高+padding+border<br> inherit 继承父元素的属性值</p></blockquote><p><code>padding</code>:元素的内边距:</p><blockquote><p><code>padding-top</code>上内边距。<br><code>padding-right</code>右内边距。<br><code>padding-bottom</code>下内边距。<br><code>padding-left</code>左内边距。<br><code>padding</code> 属性接受长度值或百分比值，但不允许使用负值。</p><blockquote><p>padding * 同时设定四个边距<br> padding ** 分别设定上下、左右边距<br> padding *** 分别设定上、左右、下边距<br> padding **** 分别设定上、右、下、左边距</p></blockquote></blockquote><p><code>border</code>:元素的边框，是围绕元素内容和内边距的一条或多条线。<br> 依次设置border-width（宽度），样式（border-style），颜色（border-color）。<br> border-style可选值solid 实线/dotted 点状边框/double双线</p><p><code>margin</code>:元素的外边距,围绕在元素边框的空白区域是外边距。</p><blockquote><p><code>margin-top</code> 上外边距。<br><code>margin-right</code> 右内边距。<br><code>margin-bottom</code> 下外边距。<br><code>margin-left</code> 左外边距。<br><code>margin</code> 属性接受长度值或百分比值，允许使用负值。</p><blockquote><p>margin * 同时设定四个外边距<br> margin ** 分别设定上下、左右外边距<br> margin *** 分别设定上、左右、下外边距<br> margin **** 分别设定上、右、下、左外边距</p></blockquote></blockquote><p><code>overflow</code> 如果内容溢出了元素内容区域，是否对内容的边缘进行裁剪。<br><code>overflow-x</code> 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。<br><code>overflow-y</code> 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。</p><blockquote><p>visible 不裁剪内容，可能会显示在内容框之外。<br> hidden 裁剪内容 - 不提供滚动机制。<br> scroll 裁剪内容 - 提供滚动机制。<br> auto 如果溢出框，则应该提供滚动机制。</p></blockquote><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>外边距的合并</li></ul><blockquote><p>外边距合并指的是，当两个块元素垂直外边距相遇时，它们将形成一个外边距，<br> 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p></blockquote><ul><li><p>行内元素没有上下外边距，没有上内边距。</p></li><li><p>对于两个嵌套关系的块元素，假如父元素没有上内边距和边框，则父元素的上外边距和儿子的上外边距发生合并，解决方案</p></li></ul><blockquote><ol><li>给父元素加overflow:hidden</li><li>给父元素加内边距或上边框。</li></ol></blockquote><ul><li><p>内外边距：绝大多数情况可以混用，建议优先使用width&gt;padding&gt;margin</p></li><li><p><code>margin</code>和<code>padding</code>设置百分比的时候，是指相对于最近的块级父元素width（非总宽度）的百分比的计算,利用此方法可以根据宽度。</p></li></ul></div>',28),t=[l];function r(a,p,b,n,s,v){return d(),e("div",null,t)}const u=o(i,[["render",r]]);export{m as __pageData,u as default};
