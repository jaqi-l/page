import{_ as s,c as a,o as i,aR as e}from"./chunks/framework.DO9sehX0.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/javascript/datatype.md","filePath":"frontend/javascript/datatype.md","lastUpdated":1715234692000}'),t={name:"frontend/javascript/datatype.md"},n=e(`<p>基本类型:<code>Undefined</code> ,<code>Null</code>, <code>Boolean</code>,<code>Number</code>,<code>String</code>,<code>Symbol(ES6)</code></p><p>引用类型: <code>Object</code>,<code>Array</code>,<code>Date</code>,<code>Function</code></p><h2 id="_3-2-1-字符串型数据string" tabindex="-1">3.2.1 字符串型数据String <a class="header-anchor" href="#_3-2-1-字符串型数据string" aria-label="Permalink to &quot;3.2.1 字符串型数据String&quot;">​</a></h2><p>常量字符串：如 &quot;JavaScript&quot;,&#39;HTML5&#39;</p><p>变量字符串：如：var text=&quot;HTML5视频教程&quot;</p><p>可以使用&quot;+&quot;进行字符串的连接。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 JavaScript 中，字符串使用单引号或者双引号来起始或者结束。如果要输出单引号或者双引号，就要用到转义字符</p><p>JavaScript中常用的转义字符</p><p>换行符：<code>\\n</code></p><p>回车符：<code>\\r</code></p><p>退格符: <code>\\b</code></p><p>反斜杠: <code>\\\\</code></p><p>双引号: <code>\\&quot;</code></p><p>......</p><p color="red">*</p>部分转义字符在输出为HTML文档流时不发生作用。 </div><h2 id="_3-2-2-数值型数据number" tabindex="-1">3.2.2 数值型数据Number <a class="header-anchor" href="#_3-2-2-数值型数据number" aria-label="Permalink to &quot;3.2.2 数值型数据Number&quot;">​</a></h2><p>JavaScript只有一种数字类型。数字可以带小数点，也可以不带。</p><p>极大或极小的数字可以通过科学（指数）计数法来书写：3e4</p><p>数值可以通过运算符进行计算。</p><p>浮点数值的最高精度是17位小数，但是在进行算术计算时其精度远远不如整数。例如，0.1加0.2的结果不是0.3， 而是0.30000000000000004。这个舍入误差会导致无法测试特定的浮点数值。</p><p>数字可以写成十进制、八进制、十六进制。</p><p>八进制在js中表示是第一位一定要是0，后面就是八进制字数序列（0~7）</p><p>十六进制字面量前两位必须是0x,后面跟十六进制数字（0~9及A~F）。字母A~F不区分大小写。</p><p>*科学（指数）计数法、八进制、十六进制表示的数字在输出时统统会转换成十进制。</p><h2 id="_3-2-3-布尔型数据boolen" tabindex="-1">3.2.3 布尔型数据Boolen <a class="header-anchor" href="#_3-2-3-布尔型数据boolen" aria-label="Permalink to &quot;3.2.3 布尔型数据Boolen&quot;">​</a></h2><p>布尔型数据boolen:只能有两个值：true 或 false。</p><p>将各种类型的值转化成Boolean类型的规则如下：</p><p>Number:任意非0的数值为true,0值和NaN为&quot;false&quot;。</p><p>String:所有的非空字符串转化为 true;&quot;&quot;（空字符串）转化成false</p><p>Object的任何对象都会转化为 true;</p><p>在javascript中，undefined、null、“ ”=false，其他都为真。</p><h2 id="_3-2-4-undefined" tabindex="-1">3.2.4 Undefined <a class="header-anchor" href="#_3-2-4-undefined" aria-label="Permalink to &quot;3.2.4 Undefined&quot;">​</a></h2><p>这是一个很有意思的数据类型，因为它的值只有一个，那就是undefined。</p><p>在申明变量时如果没有将变量赋值的话这个变量也是属于Undefined类型的。。</p><p>如果一个变量没有申明就直接去访问解释器会报错误信息，但是这样的变量如果使用typeof返回的结果也是&quot;undefined&quot;。</p><h2 id="_3-2-5-null" tabindex="-1">3.2.5 Null <a class="header-anchor" href="#_3-2-5-null" aria-label="Permalink to &quot;3.2.5 Null&quot;">​</a></h2><p>Null也是一个只有一个值得数据类型，它的值就是null，任何变量只要给其赋值为null的话这个变量的数据类型就是Null类型。</p><p>可以通过将变量的值设置为 null 来清空变量。</p><div class="tip custom-block"><p class="custom-block-title"><code>null</code>和<code>undefined</code>的区别：</p><p><code>null</code>不存在,没有开辟内存，<code>undefined</code>开辟了内存，没有值。</p></div><h2 id="_3-2-6-数组array" tabindex="-1">3.2.6 数组Array: <a class="header-anchor" href="#_3-2-6-数组array" aria-label="Permalink to &quot;3.2.6 数组Array:&quot;">​</a></h2><p>可以通过数组的下标来访问数组的元素。</p><p>数组元素的顺序从0开始</p><h2 id="_3-2-7-对象object" tabindex="-1">3.2.7 对象Object: <a class="header-anchor" href="#_3-2-7-对象object" aria-label="Permalink to &quot;3.2.7 对象Object:&quot;">​</a></h2><p>在javascript中，所有的对象都继承自Object对象。</p><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。</p><p>对象没有赋值的属性，该属性的值为undefined。</p><h2 id="_3-2-8-数据类型检测" tabindex="-1">3.2.8 数据类型检测 <a class="header-anchor" href="#_3-2-8-数据类型检测" aria-label="Permalink to &quot;3.2.8 数据类型检测&quot;">​</a></h2><h3 id="typeof方法" tabindex="-1">typeof方法： <a class="header-anchor" href="#typeof方法" aria-label="Permalink to &quot;typeof方法：&quot;">​</a></h3><p>适用于基本数据类型undefined,boolean,number,string、object、function</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Typeof vuale</span></span></code></pre></div><h3 id="constructor方法" tabindex="-1">constructor方法： <a class="header-anchor" href="#constructor方法" aria-label="Permalink to &quot;constructor方法：&quot;">​</a></h3><p>适用于对象、数组等复杂的数据类型,不适用与undefined和null。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">object.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span></span></code></pre></div><h3 id="prototype-tostring方法" tabindex="-1">prototype.toString方法： <a class="header-anchor" href="#prototype-tostring方法" aria-label="Permalink to &quot;prototype.toString方法：&quot;">​</a></h3><p>最安全、准确。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.toString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data)</span></span></code></pre></div><h3 id="instanceof方法" tabindex="-1">instanceof方法： <a class="header-anchor" href="#instanceof方法" aria-label="Permalink to &quot;instanceof方法：&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_3-2-9-浅拷贝与深拷贝" tabindex="-1">3.2.9 浅拷贝与深拷贝 <a class="header-anchor" href="#_3-2-9-浅拷贝与深拷贝" aria-label="Permalink to &quot;3.2.9 浅拷贝与深拷贝&quot;">​</a></h2><h4 id="浅拷贝-shallowcopy-只是增加了一个指针指向已存在的内存地址。" tabindex="-1">浅拷贝（shallowCopy）：只是增加了一个指针指向已存在的内存地址。 <a class="header-anchor" href="#浅拷贝-shallowcopy-只是增加了一个指针指向已存在的内存地址。" aria-label="Permalink to &quot;浅拷贝（shallowCopy）：只是增加了一个指针指向已存在的内存地址。&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,c:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// arr1指向另一个内存地址，不影响arr2指向之前arr1指向的内存地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {a: 0, b: 1, c: 2}</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {a:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,c:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arr1.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修改了arr1和arr2共同指向的内存地址里面的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr1); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {a: 4, b: 1, c: 2}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {a: 4, b: 1, c: 2}</span></span></code></pre></div><h4 id="深拷贝-deepcopy-增加了一个指针并且申请了一个新的内存-使这个增加的指针指向这个新的内存" tabindex="-1">深拷贝（deepCopy）：增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存， <a class="header-anchor" href="#深拷贝-deepcopy-增加了一个指针并且申请了一个新的内存-使这个增加的指针指向这个新的内存" aria-label="Permalink to &quot;深拷贝（deepCopy）：增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存，&quot;">​</a></h4><p>对于字符串类型，浅拷贝是对值的复制。对于对象来说，浅拷贝是对对象地址的复制。</p><ul><li>深拷方法：</li></ul><ol><li>JSON方法</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj))</span></span></code></pre></div><ol start="2"><li>递归</li><li>利用lodash库的cloneDeep方法</li><li>ES6扩展运算符（只能当对象属性是基本数据类型才是深拷贝，引用类型还是浅拷贝）</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj1}</span></span></code></pre></div>`,61),l=[n];function p(h,k,r,d,o,c){return i(),a("div",null,l)}const u=s(t,[["render",p]]);export{g as __pageData,u as default};
