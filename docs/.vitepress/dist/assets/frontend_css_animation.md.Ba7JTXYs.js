import{_ as e,c as o,o as c,aR as d}from"./chunks/framework.DO9sehX0.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/css/animation.md","filePath":"frontend/css/animation.md","lastUpdated":1715234692000}'),a={name:"frontend/css/animation.md"},t=d('<h2 id="_2-7-1变形" tabindex="-1">2.7.1变形 <a class="header-anchor" href="#_2-7-1变形" aria-label="Permalink to &quot;2.7.1变形&quot;">​</a></h2><h3 id="transform-2d变形" tabindex="-1"><code>transform</code>：2D变形： <a class="header-anchor" href="#transform-2d变形" aria-label="Permalink to &quot;`transform`：2D变形：&quot;">​</a></h3><ul><li>移动：</li></ul><p><code>translate(x,y)</code>X,Y轴移动。<br><code>translateX(x)</code>X轴移动。<br><code>translateY(y)</code>Y轴移动。</p><ul><li>缩放：</li></ul><p><code>scale(x,y)</code>X,Y轴缩放。<br><code>scaleX(x)</code>X轴缩放。<br><code>scaleY(y)</code>Y轴缩放。</p><ul><li>转动：</li></ul><p><code>rotate(angle)</code>转动角度。<br><code>skew(x-angle,y-angle)</code>定义沿着 X 和 Y 轴的 2D 倾斜转换。<br><code>kewX(angle)</code>沿着X轴的转动。<br><code>skewY(angle)</code>沿着Y轴的转动。<br><code>matrix(n,n,n,n,n,n) </code>定义2D转换，使用六个值的矩阵。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>转动单位可以设置角度<code>deg</code>/弧度<code>rad</code></li><li>长度单位可以设置像素<code>px</code>像素/百分比<code>%</code></li><li>X轴可以设置<code>left</code>/<code>right</code>/<code>center</code></li><li>Y轴可以设置<code>top</code>/<code>bottom</code>/<code>center</code></li></ul></div><h3 id="transform-3d变形" tabindex="-1"><code>transform</code>：3D变形 <a class="header-anchor" href="#transform-3d变形" aria-label="Permalink to &quot;`transform`：3D变形&quot;">​</a></h3><p>transform：3D变形可以近似理解为沿着Z轴移动元素，使得元素更加靠近或者远离你，从而使元素看起来变得更大或更小。</p><ul><li>移动：</li></ul><p><code>translate3d(x,y,z)</code>X,Y,Z轴移动。<br><code>translateX(x)</code>X轴移动。<br><code>translateY(y)</code>Y轴移动。<br><code>translateZ(z)</code>z轴移动。</p><ul><li>缩放：</li></ul><p><code>scale3d(x,y,z)</code>X,Y,Z轴3D缩放。<br><code>scaleX(x)</code>X轴缩放。<br><code>scaleY(y)</code>Y轴缩放。<br><code>scaleZ(z)</code>Z轴缩放。</p><ul><li>转动：</li></ul><p><code>rotate3d(x,y,z,angle)</code>3D旋转。<br><code>rotateX(angle)</code>沿着X轴转动。<br><code>rotateY(angle)</code>沿着Y轴转动。<br><code>rotateZ(angle)</code>沿着Z轴转动。 <code>matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) </code>定义 3D 转换，使用 16 个值的 4x4 矩阵。</p><h3 id="其他属性" tabindex="-1">其他属性： <a class="header-anchor" href="#其他属性" aria-label="Permalink to &quot;其他属性：&quot;">​</a></h3><p><code>transform-origin</code>改变元素变形的基准点。</p><p><code>perspective(n)</code>为3D转换元素定义透视视图，视距大，透视变形越小，反之。</p><p><code>perspective-origin</code>规定 3D 元素的底部位置。目前浏览器都不支持。</p><p><code>backface-visibility</code>定义元素在不面对屏幕时是否可见。反转时正显，背隐。浏览器支持度不好。</p><p><code>transform-style</code>规定被嵌套元素如何在 3D 空间中显示。</p><blockquote><p><code>flat</code>子元素将不保留其 3D 位置。<br><code>preserve-3d</code>子元素将保留其 3D 位置。</p></blockquote><h2 id="_2-6-2过渡" tabindex="-1">2.6.2过渡 <a class="header-anchor" href="#_2-6-2过渡" aria-label="Permalink to &quot;2.6.2过渡&quot;">​</a></h2><p>通过 CSS3，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。 CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。要实现这一点，必须规定两项内容：把效果添加到哪个 CSS 属性上/规定效果的时长</p><ul><li>过渡动画的属性：</li></ul><p><code>transition</code> 简写属性，用于在一个属性中设置四个过渡属性。</p><p><code>transition-property</code> 规定应用过渡的 CSS 属性的名称。</p><blockquote><p><code>none</code>没有属性会获得过渡效果。<br><code>all</code>所有属性都将获得过渡效果。<br><code>属性名称</code></p></blockquote><p><code>transition-duration</code>定义过渡效果花费的时间。默认是 0。单位是秒或毫秒</p><p><code>transition-timing-function</code>规定过渡效果的时间曲线。默认是 &quot;ease&quot;。</p><blockquote><p><code>linear</code>规定以相同速度开始至结束的过渡效果（等于<code>cubic-bezier(0,0,1,1)</code>）。<br><code>ease</code>规定慢速开始，然后变快，然后慢速结束的过渡效果（<code>cubic-bezier(0.25,0.1,0.25,1)</code>）。<br><code>ease-in</code>规定以慢速开始的过渡效果（等于 <code>cubic-bezier(0.42,0,1,1)</code>）。<br><code>ease-out</code>规定以慢速结束的过渡效果（等于 <code>cubic-bezier(0,0,0.58,1)</code>）。<br><code>ease-in-out</code>规定以慢速开始和结束的过渡效果（等于 <code>cubic-bezier(0.42,0,0.58,1)</code>）。<br><code>cubic-bezier(n,n,n,n)</code>在<code>cubic-bezier</code>函数中定义自己的值。可能的值是 0 至 1 之间的数值。</p></blockquote><p><code>transition-delay</code>规定过渡效果何时开始。默认是 0。</p><h2 id="_2-7-3关键帧动画" tabindex="-1">2.7.3关键帧动画 <a class="header-anchor" href="#_2-7-3关键帧动画" aria-label="Permalink to &quot;2.7.3关键帧动画&quot;">​</a></h2><p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p><p><code>@keyframes</code> 设定动画规则。可以近似理解为动画的剧本。</p><blockquote><p><code>name</code>必需。定义动画的名称。<br> 0-100%/from...to...动画时长的百分比。<br> 需要变化的CSS样式属性。</p></blockquote><p><code>animation</code> 所有动画属性的简写属性，用于设置六个动画属性：</p><blockquote><p><code>animation-name</code><br><code>animation-duration</code><br><code>animation-timing-function</code><br><code>animation-delay</code><br><code>animation-iteration-count</code><br><code>animation-direction</code></p></blockquote><p><code>animation-name</code>属性为 @keyframes 动画规定名称。若设置为none则覆盖已有的动画效果。</p><p><code>animation-duration</code> 规定动画完成一个周期所花费的秒或毫秒。默认是 0。</p><p><code>animation-timing-function</code> 规定动画的速度曲线：</p><blockquote><p><code>linear</code>规定以相同速度开始至结束的过渡效果（等于<code>cubic-bezier(0,0,1,1)</code>）。<br><code>ease</code>（默认值）规定慢速开始，然后变快，然后慢速结束的过渡效果（等于<code>cubic-bezier(0.25,0.1,0.25,1)</code>）。<br><code>ease-in</code>规定以慢速开始的过渡效果（等于<code>cubic-bezier(0.42,0,1,1)</code>）。<br><code>ease-out</code>规定以慢速结束的过渡效果（等于<code>cubic-bezier(0,0,0.58,1)</code>）。<br><code>ease-in-out</code>规定以慢速开始和结束的过渡效果（等于<code>cubic-bezier(0.42,0,0.58,1)</code>）。<br><code>cubic-bezier(n,n,n,n)</code>在cubic-bezier函数中定义自己的值。可能的值是 0 至 1 之间的数值。</p></blockquote><p><code>animation-delay</code> 规定动画何时开始。默认是 0。</p><p><code>animation-iteration-count</code> 规定动画被播放的次数。默认是 1。infinite为无限次播放。</p><p><code>animation-direction</code> 规定动画是否在下一周期逆向地播放。</p><blockquote><p><code>normal</code>（默认值）顺向播放&quot;<br><code>alternate</code>动画应该轮流反向播放。</p></blockquote><p><code>animation-play-state</code> 规定动画是否正在运行或暂停。</p><blockquote><p><code>running</code>（默认值）正在播放。<br><code>paused</code>动画暂停。</p></blockquote><p><code>animation-fill-mode</code> 规定对象动画时间之外的状态。</p><blockquote><p><code>none</code>不改变默认行为。<br><code>forwards</code>当动画完成后，保持最后一个属性值（在最后一个关键帧中定义）。<br><code>backwards</code>在<code>animation-delay</code>所指定的一段时间内，在动画显示之前，应用开始属性值（在第一个关键帧中定义）。<br><code>both</code>向前和向后填充模式都被应用。</p></blockquote>',52),n=[t];function i(r,l,b,p,s,u){return c(),o("div",null,n)}const h=e(a,[["render",i]]);export{f as __pageData,h as default};
